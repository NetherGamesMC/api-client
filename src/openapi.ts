/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
  readonly '/v1/announcements': {
    readonly get: operations['Get Announcements'];
  };
  readonly '/v1/discord': {
    readonly get: operations['Get Discord Member Count'];
  };
  readonly '/v1/factions/{name}': {
    readonly get: operations['Get Faction'];
  };
  readonly '/v1/factions': {
    readonly get: operations['Get Factions'];
  };
  readonly '/v1/factions/batch': {
    readonly post: operations['Bulk Get Factions'];
  };
  readonly '/v1/guilds/{name}': {
    readonly get: operations['Get Guild'];
  };
  readonly '/v1/guilds': {
    readonly get: operations['Get Guilds'];
  };
  readonly '/v1/guilds/batch': {
    readonly post: operations['Bulk Get Guilds'];
  };
  readonly '/v1/leaderboard': {
    readonly get: operations['Get Leaderboard'];
  };
  readonly '/v1/leaderboard/bulk': {
    readonly post: operations['Bulk Get Leaderboards'];
  };
  readonly '/v1/players/{player}': {
    readonly get: operations['Get Player'];
  };
  readonly '/v1/players/{player}/avatar': {
    readonly get: operations['Get Player Avatar'];
  };
  readonly '/v1/players/{player}/leaderboard': {
    readonly get: operations['Get Player Leaderboard'];
  };
  readonly '/v1/players/leaderboard/bulk': {
    readonly post: operations['Bulk Get Player Leaderboards'];
  };
  readonly '/v1/players/{player}/punishments': {
    readonly get: operations['Get Player Punishments'];
  };
  readonly '/v1/players': {
    readonly get: operations['Get Players'];
  };
  readonly '/v1/players/batch': {
    readonly post: operations['Bulk Get Players'];
  };
  readonly '/v1/players/{player}/skin': {
    readonly get: operations['Get Player Skin'];
  };
  readonly '/v1/players/{player}/stats': {
    /** API key required. */
    readonly get: operations['Get Player Stats History'];
  };
  readonly '/v1/search': {
    readonly get: operations['Get Search Results'];
  };
  readonly '/v1/search-full': {
    readonly get: operations['Get Full-Text Search Results'];
  };
  readonly '/v1/servers/meta': {
    readonly get: operations['Get Server Metadata'];
  };
  readonly '/v1/servers/settings': {
    readonly get: operations['Get Server MOTDs'];
  };
  readonly '/v1/servers/ping': {
    readonly get: operations['Get Server Ping'];
  };
  readonly '/v1/servers': {
    readonly get: operations['Get Servers'];
  };
  readonly '/v1/status': {
    readonly get: operations['Get Service Status'];
  };
  readonly '/v1/stream': {
    readonly get: operations['Get Stream Status'];
  };
  readonly '/v1/updates': {
    readonly get: operations['Get Updates'];
  };
  readonly '/v1/players/xuids': {
    readonly post: operations['Get XUID Mapping'];
  };
}

export interface components {
  readonly schemas: {
    readonly XuidMappingResponse: {readonly [key: string]: string};
    readonly XuidMappingInput: Partial<{
      readonly xuids: readonly string[];
    }> &
      Partial<readonly string[]>;
    readonly UpdatesResponse: readonly {
      readonly id: number;
      readonly content: string;
      /** Format: date-time */
      readonly timestamp: string;
      /** Format: date-time */
      readonly editedTimestamp: string | null;
    }[];
    readonly UpdatesQuery: {
      readonly before?: number;
      readonly after?: number;
      /** @default 100 */
      readonly limit?: number;
    };
    readonly UpdateResponse: {
      readonly id: number;
      readonly content: string;
      /** Format: date-time */
      readonly timestamp: string;
      /** Format: date-time */
      readonly editedTimestamp: string | null;
    };
    readonly StreamResponse: {
      readonly streaming: boolean;
    };
    readonly ServiceStatusResponse: {
      readonly title: string;
      readonly message: string;
      /** @enum {string} */
      readonly status: 'maintenance' | 'major_outage' | 'minor_outage' | 'degraded_performance' | 'operational';
      readonly color: string;
      readonly url: string;
    };
    readonly ServerSettingsResponse: {
      readonly motds: readonly string[];
    };
    readonly ServerResponse: {
      readonly mm: {
        readonly max: number;
        readonly count: number;
        readonly infection: {
          readonly max: number;
          readonly count: number;
        };
        readonly classic: {
          readonly max: number;
          readonly count: number;
        };
      };
      readonly sw: {
        readonly max: number;
        readonly count: number;
        readonly doubles: {
          readonly max: number;
          readonly count: number;
        };
        readonly solo: {
          readonly max: number;
          readonly count: number;
        };
        readonly onevone: {
          readonly max: number;
          readonly count: number;
        };
        readonly twovtwo: {
          readonly max: number;
          readonly count: number;
        };
      };
      readonly ms: {
        readonly max: number;
        readonly count: number;
      };
      readonly replay: {
        readonly max: number;
        readonly count: number;
      };
      readonly duels: {
        readonly max: number;
        readonly count: number;
        readonly doubles: {
          readonly max: number;
          readonly count: number;
        };
        readonly solo: {
          readonly max: number;
          readonly count: number;
        };
      };
      readonly tb: {
        readonly max: number;
        readonly count: number;
        readonly doubles: {
          readonly max: number;
          readonly count: number;
        };
        readonly solo: {
          readonly max: number;
          readonly count: number;
        };
      };
      readonly cq: {
        readonly max: number;
        readonly count: number;
        readonly mega: {
          readonly max: number;
          readonly count: number;
        };
      };
      readonly creative: {
        readonly max: number;
        readonly count: number;
      };
      readonly sb: {
        readonly max: number;
        readonly count: number;
        readonly skyland: {
          readonly max: number;
          readonly count: number;
        };
        readonly agora: {
          readonly max: number;
          readonly count: number;
        };
      };
      readonly factions: {
        readonly max: number;
        readonly count: number;
        readonly farlands: {
          readonly max: number;
          readonly count: number;
        };
        readonly badlands: {
          readonly max: number;
          readonly count: number;
        };
      };
      readonly sc: {
        readonly max: number;
        readonly count: number;
      };
      readonly uhc: {
        readonly max: number;
        readonly count: number;
        readonly doubles: {
          readonly max: number;
          readonly count: number;
        };
        readonly solo: {
          readonly max: number;
          readonly count: number;
        };
      };
      readonly lobby: {
        readonly max: number;
        readonly count: number;
      };
      readonly sg: {
        readonly max: number;
        readonly count: number;
      };
      readonly bw: {
        readonly max: number;
        readonly count: number;
        readonly doubles: {
          readonly max: number;
          readonly count: number;
        };
        readonly squads: {
          readonly max: number;
          readonly count: number;
        };
        readonly solo: {
          readonly max: number;
          readonly count: number;
        };
      };
      readonly setup: {
        readonly max: number;
        readonly count: number;
      };
    };
    readonly ServerPingResponse: {
      /** @enum {string} */
      readonly edition: 'MCPE';
      readonly motd: {
        readonly raw: string;
        readonly clean: string;
      };
      readonly version: {
        readonly name: string;
        readonly protocol: number;
      };
      readonly players: {
        readonly online: number;
        readonly max: number;
      };
      readonly serverID: string;
      readonly gameMode: string;
      readonly gameModeID: number;
      readonly portIPv4: number;
      readonly portIPv6: number;
    };
    readonly ServerPingQuery: {
      /** @default play.nethergames.org */
      readonly ip?: string;
      /** @default 19132 */
      readonly port?: number;
    };
    readonly ServerMetaResponse: {
      /** @enum {string} */
      readonly AC: 'Arcade';
      /** @enum {string} */
      readonly BB: 'Build Battle';
      /** @enum {string} */
      readonly Beta: 'Beta';
      /** @enum {string} */
      readonly BH: 'Block Hunt';
      /** @enum {string} */
      readonly BR: 'Battle Royale';
      /** @enum {string} */
      readonly BW: 'Bedwars';
      /** @enum {string} */
      readonly CQ: 'Conquests';
      /** @enum {string} */
      readonly Creative: 'Creative';
      /** @enum {string} */
      readonly CTF: 'Capture the Flag';
      /** @enum {string} */
      readonly Duels: 'Duels';
      /** @enum {string} */
      readonly Factions: 'Factions';
      /** @enum {string} */
      readonly Lobby: 'Lobby';
      /** @enum {string} */
      readonly MM: 'Murder Mystery';
      /** @enum {string} */
      readonly MS: 'Momma Says';
      /** @enum {string} */
      readonly Replay: 'Replay';
      /** @enum {string} */
      readonly SB: 'Skyblock';
      /** @enum {string} */
      readonly SC: 'Soccer';
      /** @enum {string} */
      readonly SG: 'Survival Games';
      /** @enum {string} */
      readonly SP: 'Spleef';
      /** @enum {string} */
      readonly SW: 'Skywars';
      /** @enum {string} */
      readonly TB: 'The Bridge';
      /** @enum {string} */
      readonly TR: 'TNT Run';
      /** @enum {string} */
      readonly UHC: 'UHC';
      /** @enum {string} */
      readonly ac: 'Arcade';
      /** @enum {string} */
      readonly bb: 'Build Battle';
      /** @enum {string} */
      readonly beta: 'Beta';
      /** @enum {string} */
      readonly bh: 'Block Hunt';
      /** @enum {string} */
      readonly br: 'Battle Royale';
      /** @enum {string} */
      readonly bw: 'Bedwars';
      /** @enum {string} */
      readonly cq: 'Conquests';
      /** @enum {string} */
      readonly creative: 'Creative';
      /** @enum {string} */
      readonly ctf: 'Capture the Flag';
      /** @enum {string} */
      readonly duels: 'Duels';
      /** @enum {string} */
      readonly factions: 'Factions';
      /** @enum {string} */
      readonly lobby: 'Lobby';
      /** @enum {string} */
      readonly mm: 'Murder Mystery';
      /** @enum {string} */
      readonly ms: 'Momma Says';
      /** @enum {string} */
      readonly replay: 'Replay';
      /** @enum {string} */
      readonly sb: 'Skyblock';
      /** @enum {string} */
      readonly sc: 'Soccer';
      /** @enum {string} */
      readonly sg: 'Survival Games';
      /** @enum {string} */
      readonly sp: 'Spleef';
      /** @enum {string} */
      readonly sw: 'Skywars';
      /** @enum {string} */
      readonly tb: 'The Bridge';
      /** @enum {string} */
      readonly tr: 'TNT Run';
      /** @enum {string} */
      readonly uhc: 'UHC';
    };
    readonly ServerGameStats: {
      readonly max: number;
      readonly count: number;
    };
    readonly SearchResponse: Partial<{
      /** @enum {string} */
      readonly type: 'faction';
      readonly data: {
        readonly id: number;
        readonly name: string;
        readonly strength: number;
        readonly allies: readonly string[];
        readonly leader?: unknown;
        readonly officers: readonly unknown[];
        readonly members: readonly unknown[];
      };
    }> &
      Partial<{
        /** @enum {string} */
        readonly type: 'guild';
        readonly data: {
          readonly id: number;
          readonly name: string;
          readonly maxSize: number;
          readonly memberCount: number;
          readonly motd: string;
          readonly position?: number;
          readonly rawTag: string;
          readonly tag: string | null;
          /** @enum {string|null} */
          readonly tagColor:
            | (
                | '#000000'
                | '#0000aa'
                | '#00aa00'
                | '#00aaaa'
                | '#aa0000'
                | '#aa00aa'
                | '#ffaa00'
                | '#aaaaaa'
                | '#555555'
                | '#5555ff'
                | '#55ff55'
                | '#55ffff'
                | '#ff5555'
                | '#ff55ff'
                | '#ffff55'
                | '#ffffff'
                | '#ddd605'
              )
            | null;
          readonly xp: number;
          readonly xpToNextLevel: number;
          readonly level: number;
          readonly leader?: unknown;
          readonly officers: readonly unknown[];
          readonly members: readonly unknown[];
        };
      }> &
      Partial<{
        /** @enum {string} */
        readonly type: 'player';
        readonly data: {
          readonly xuid: string;
          readonly name: string;
          /** Format: uri */
          readonly avatar: string;
          /** Format: uri */
          readonly skin: string;
          readonly skinData?: {
            readonly skin: boolean;
            /** @enum {string} */
            readonly skinType: 'steve' | 'alex';
            readonly skinVisibility: boolean;
            readonly base64: string;
            readonly raw: string | null;
          };
          readonly skinVisibility: boolean;
          readonly bio: string;
          readonly staff: boolean;
          readonly flags: number;
          readonly banned?: boolean;
          readonly muted?: boolean;
          readonly guild: string | null;
          readonly guildData?:
            | (Partial<unknown> &
                Partial<{
                  readonly id: number;
                  readonly name: string;
                  readonly maxSize: number;
                  readonly memberCount: number;
                  readonly motd: string;
                  readonly position?: number;
                  readonly rawTag: string;
                  readonly tag: string | null;
                  /** @enum {string|null} */
                  readonly tagColor:
                    | (
                        | '#000000'
                        | '#0000aa'
                        | '#00aa00'
                        | '#00aaaa'
                        | '#aa0000'
                        | '#aa00aa'
                        | '#ffaa00'
                        | '#aaaaaa'
                        | '#555555'
                        | '#5555ff'
                        | '#55ff55'
                        | '#55ffff'
                        | '#ff5555'
                        | '#ff55ff'
                        | '#ffff55'
                        | '#ffffff'
                        | '#ddd605'
                      )
                    | null;
                  readonly xp: number;
                  readonly xpToNextLevel: number;
                  readonly level: number;
                  readonly leader?: unknown;
                  readonly officers: readonly unknown[];
                  readonly members: readonly unknown[];
                }>)
            | null;
          readonly level: number;
          readonly levelColors: readonly (
            | '#000000'
            | '#0000aa'
            | '#00aa00'
            | '#00aaaa'
            | '#aa0000'
            | '#aa00aa'
            | '#ffaa00'
            | '#aaaaaa'
            | '#555555'
            | '#5555ff'
            | '#55ff55'
            | '#55ffff'
            | '#ff5555'
            | '#ff55ff'
            | '#ffff55'
            | '#ffffff'
            | '#ddd605'
          )[];
          /** @enum {string} */
          readonly levelFormat: '§k' | '§l' | '§o' | '§r';
          readonly formattedLevel: string;
          readonly online?: boolean;
          readonly credits: number;
          readonly statusCredits: number;
          readonly xp: number;
          readonly xpToNextLevel: number;
          readonly ranks: readonly (
            | 'Owner'
            | 'Director'
            | 'Advisor'
            | 'Community'
            | 'Admin'
            | 'Dev'
            | 'Supervisor'
            | 'Discord'
            | 'Mod'
            | 'Crew'
            | 'Trainee'
            | 'Builder'
            | 'Designer'
            | 'Game Designer'
            | 'Media'
            | 'Partner'
            | 'Titan'
            | 'Legend'
            | 'Emerald'
            | 'Ultra'
            | 'Youtube'
            | 'Tester'
          )[];
          readonly rankColors: readonly string[];
          /** @enum {string|null} */
          readonly tier: ('Silver' | 'Gold' | 'Guardian' | 'Eagle' | 'Elite') | null;
          readonly tierColor: string | null;
          readonly kills?: number;
          readonly deaths?: number;
          readonly kdr?: number;
          readonly wins?: number;
          readonly losses?: number;
          readonly wlr?: number;
          readonly firstJoin: string | null;
          readonly firstJoined: number;
          readonly lastJoin: string | null;
          readonly lastJoined: number;
          readonly lastSeen: string | null;
          readonly lastServer: string;
          readonly lastServerParsed: {
            readonly region: string | null;
            readonly serverName: string | null;
            readonly serverNameLong: string | null;
            readonly serverType: string | null;
            readonly pretty: string;
          };
          /** @description Deprecated, use `discordId` instead */
          readonly discordData: {readonly [key: string]: unknown};
          readonly discordId: string | null;
          readonly extra?: {
            /** @default 0 */
            readonly bhWins?: number;
            /** @default 0 */
            readonly bwKills?: number;
            /** @default 0 */
            readonly bwDeaths?: number;
            /** @default 0 */
            readonly bwSoloKills?: number;
            /** @default 0 */
            readonly bwSoloDeaths?: number;
            /** @default 0 */
            readonly bwDoublesKills?: number;
            /** @default 0 */
            readonly bwDoublesDeaths?: number;
            /** @default 0 */
            readonly bwTriosKills?: number;
            /** @default 0 */
            readonly bwTriosDeaths?: number;
            /** @default 0 */
            readonly bwSquadsKills?: number;
            /** @default 0 */
            readonly bwSquadsDeaths?: number;
            /** @default 0 */
            readonly bwBedsBroken?: number;
            /** @default 0 */
            readonly bwSoloBedsBroken?: number;
            /** @default 0 */
            readonly bwDoublesBedsBroken?: number;
            /** @default 0 */
            readonly bwTriosBedsBroken?: number;
            /** @default 0 */
            readonly bwSquadsBedsBroken?: number;
            /** @default 0 */
            readonly bwDiamondsCollected?: number;
            /** @default 0 */
            readonly bwEmeraldsCollected?: number;
            /** @default 0 */
            readonly bwGoldCollected?: number;
            /** @default 0 */
            readonly bwIronCollected?: number;
            /** @default 0 */
            readonly bwFinalKills?: number;
            /** @default 0 */
            readonly bwSoloFinalKills?: number;
            /** @default 0 */
            readonly bwDoublesFinalKills?: number;
            /** @default 0 */
            readonly bwTriosFinalKills?: number;
            /** @default 0 */
            readonly bwSquadsFinalKills?: number;
            /** @default 0 */
            readonly bwStreak?: number;
            /** @default 0 */
            readonly bwBestStreak?: number;
            /** @default 0 */
            readonly bwWins?: number;
            /** @default 0 */
            readonly bwSoloWins?: number;
            /** @default 0 */
            readonly bwDoublesWins?: number;
            /** @default 0 */
            readonly bwTriosWins?: number;
            /** @default 0 */
            readonly bwSquadsWins?: number;
            /** @default 0 */
            readonly cqKills?: number;
            /** @default 0 */
            readonly cqDeaths?: number;
            /** @default 0 */
            readonly cqWins?: number;
            /** @default 0 */
            readonly cqFlagsCollected?: number;
            /** @default 0 */
            readonly cqFlagsCaptured?: number;
            /** @default 0 */
            readonly cqFlagsReturned?: number;
            /** @default 0 */
            readonly cqDiamondsCollected?: number;
            /** @default 0 */
            readonly cqEmeraldsCollected?: number;
            /** @default 0 */
            readonly cqGoldCollected?: number;
            /** @default 0 */
            readonly cqIronCollected?: number;
            /** @default 0 */
            readonly duelsKills?: number;
            /** @default 0 */
            readonly duelsDeaths?: number;
            /** @default 0 */
            readonly duelsArrowsShot?: number;
            /** @default 0 */
            readonly duelsMeleeHits?: number;
            /** @default 0 */
            readonly duelsStreak?: number;
            /** @default 0 */
            readonly duelsBestStreak?: number;
            /** @default 0 */
            readonly duelsWins?: number;
            /** @default 0 */
            readonly duelsLosses?: number;
            /** @default 0 */
            readonly mmKills?: number;
            /** @default 0 */
            readonly mmDeaths?: number;
            /** @default 0 */
            readonly mmClassicKills?: number;
            /** @default 0 */
            readonly mmClassicDeaths?: number;
            /**
             * @description Not implemented yet.
             * @default 0
             */
            readonly mmInfectionKills?: number;
            /** @default 0 */
            readonly mmInfectionDeaths?: number;
            /** @default 0 */
            readonly mmBowKills?: number;
            /** @default 0 */
            readonly mmKnifeKills?: number;
            /** @default 0 */
            readonly mmThrowKnifeKills?: number;
            /** @default 0 */
            readonly mmWins?: number;
            /** @default 0 */
            readonly mmClassicWins?: number;
            /** @default 0 */
            readonly mmInfectionWins?: number;
            /** @default 0 */
            readonly msSuccesses?: number;
            /** @default 0 */
            readonly msFails?: number;
            /** @default 0 */
            readonly msWins?: number;
            /** @default 0 */
            readonly scWins?: number;
            /** @default 0 */
            readonly scGoals?: number;
            /** @default 0 */
            readonly sgKills?: number;
            /** @default 0 */
            readonly sgDeaths?: number;
            /** @default 0 */
            readonly sgWins?: number;
            /** @default 0 */
            readonly swCoins?: number;
            /** @default 0 */
            readonly swKills?: number;
            /** @default 0 */
            readonly swDeaths?: number;
            /** @default 0 */
            readonly swSoloKills?: number;
            /** @default 0 */
            readonly swSoloDeaths?: number;
            /** @default 0 */
            readonly swSoloNormalKills?: number;
            /** @default 0 */
            readonly swSoloNormalDeaths?: number;
            /** @default 0 */
            readonly swSoloInsaneKills?: number;
            /** @default 0 */
            readonly swSoloInsaneDeaths?: number;
            /** @default 0 */
            readonly swDoublesKills?: number;
            /** @default 0 */
            readonly swDoublesDeaths?: number;
            /** @default 0 */
            readonly swDoublesNormalKills?: number;
            /** @default 0 */
            readonly swDoublesNormalDeaths?: number;
            /** @default 0 */
            readonly swDoublesInsaneKills?: number;
            /** @default 0 */
            readonly swDoublesInsaneDeaths?: number;
            /** @default 0 */
            readonly swBlocksBroken?: number;
            /** @default 0 */
            readonly swBlocksPlaced?: number;
            /** @default 0 */
            readonly swArrowsShot?: number;
            /** @default 0 */
            readonly swEggsThrown?: number;
            /** @default 0 */
            readonly swEpearlsThrown?: number;
            /** @default 0 */
            readonly swWins?: number;
            /** @default 0 */
            readonly swSoloWins?: number;
            /** @default 0 */
            readonly swDoublesWins?: number;
            /** @default 0 */
            readonly swLosses?: number;
            /** @default 0 */
            readonly swSoloLosses?: number;
            /** @default 0 */
            readonly swDoublesLosses?: number;
            /** @default 0 */
            readonly tbKills?: number;
            /** @default 0 */
            readonly tbDeaths?: number;
            /** @default 0 */
            readonly tbArrowsShot?: number;
            /** @default 0 */
            readonly tbMeleeHits?: number;
            /** @default 0 */
            readonly tbGoals?: number;
            /** @default 0 */
            readonly tbStreak?: number;
            /** @default 0 */
            readonly tbBestStreak?: number;
            /** @default 0 */
            readonly tbWins?: number;
            /** @default 0 */
            readonly tbLosses?: number;
            /** @default 0 */
            readonly trWins?: number;
            /** @default 0 */
            readonly trLosses?: number;
            /** @default 0 */
            readonly trStreak?: number;
            /** @default 0 */
            readonly trBestStreak?: number;
            /** @default 0 */
            readonly trBlocksDropped?: number;
            /** @default 0 */
            readonly trTimeRecord?: number;
            /** @default 0 */
            readonly weeklyKills?: number;
            /** @default 0 */
            readonly weeklyWins?: number;
            /** @default 0 */
            readonly uhcKills?: number;
            /** @default 0 */
            readonly uhcDeaths?: number;
            /** @default 0 */
            readonly uhcWins?: number;
            /** @default 0 */
            readonly uhcIronMined?: number;
            /** @default 0 */
            readonly uhcGoldMined?: number;
            /** @default 0 */
            readonly uhcLapisMined?: number;
            /** @default 0 */
            readonly uhcDiamondMined?: number;
          };
          readonly extraNested?: {
            readonly bh: {
              readonly wins: number;
            };
            readonly bw: {
              readonly kills: number;
              readonly deaths: number;
              readonly solo: {
                readonly kills: number;
                readonly deaths: number;
                readonly beds: {
                  readonly broken: number;
                };
                readonly final: {
                  readonly kills: number;
                };
                readonly wins: number;
              };
              readonly doubles: {
                readonly kills: number;
                readonly deaths: number;
                readonly beds: {
                  readonly broken: number;
                };
                readonly final: {
                  readonly kills: number;
                };
                readonly wins: number;
              };
              readonly trios: {
                readonly kills: number;
                readonly deaths: number;
                readonly beds: {
                  readonly broken: number;
                };
                readonly final: {
                  readonly kills: number;
                };
                readonly wins: number;
              };
              readonly squads: {
                readonly kills: number;
                readonly deaths: number;
                readonly beds: {
                  readonly broken: number;
                };
                readonly final: {
                  readonly kills: number;
                };
                readonly wins: number;
              };
              readonly beds: {
                readonly broken: number;
              };
              readonly diamonds: {
                readonly collected: number;
              };
              readonly emeralds: {
                readonly collected: number;
              };
              readonly gold: {
                readonly collected: number;
              };
              readonly iron: {
                readonly collected: number;
              };
              readonly final: {
                readonly kills: number;
              };
              readonly streak: number;
              readonly best: {
                readonly streak: number;
              };
              readonly wins: number;
            };
            readonly cq: {
              readonly kills: number;
              readonly deaths: number;
              readonly wins: number;
              readonly flags: {
                readonly collected: number;
                readonly captured: number;
                readonly returned: number;
              };
              readonly diamonds: {
                readonly collected: number;
              };
              readonly emeralds: {
                readonly collected: number;
              };
              readonly gold: {
                readonly collected: number;
              };
              readonly iron: {
                readonly collected: number;
              };
            };
            readonly duels: {
              readonly kills: number;
              readonly deaths: number;
              readonly arrows: {
                readonly shot: number;
              };
              readonly melee: {
                readonly hits: number;
              };
              readonly streak: number;
              readonly best: {
                readonly streak: number;
              };
              readonly wins: number;
              readonly losses: number;
            };
            readonly mm: {
              readonly kills: number;
              readonly deaths: number;
              readonly classic: {
                readonly kills: number;
                readonly deaths: number;
                readonly wins: number;
              };
              readonly infection: {
                /**
                 * @description Not implemented yet.
                 * @default 0
                 */
                readonly kills?: number;
                readonly deaths: number;
                readonly wins: number;
              };
              readonly bow: {
                readonly kills: number;
              };
              readonly knife: {
                readonly kills: number;
              };
              readonly throw: {
                readonly knife: {
                  readonly kills: number;
                };
              };
              readonly wins: number;
            };
            readonly ms: {
              readonly successes: number;
              readonly fails: number;
              readonly wins: number;
            };
            readonly sc: {
              readonly wins: number;
              readonly goals: number;
            };
            readonly sg: {
              readonly kills: number;
              readonly deaths: number;
              readonly wins: number;
            };
            readonly sw: {
              readonly coins: number;
              readonly kills: number;
              readonly deaths: number;
              readonly solo: {
                readonly kills: number;
                readonly deaths: number;
                readonly normal: {
                  readonly kills: number;
                  readonly deaths: number;
                };
                readonly insane: {
                  readonly kills: number;
                  readonly deaths: number;
                };
                readonly wins: number;
                readonly losses: number;
              };
              readonly doubles: {
                readonly kills: number;
                readonly deaths: number;
                readonly normal: {
                  readonly kills: number;
                  readonly deaths: number;
                };
                readonly insane: {
                  readonly kills: number;
                  readonly deaths: number;
                };
                readonly wins: number;
                readonly losses: number;
              };
              readonly blocks: {
                readonly broken: number;
                readonly placed: number;
              };
              readonly arrows: {
                readonly shot: number;
              };
              readonly eggs: {
                readonly thrown: number;
              };
              readonly epearls: {
                readonly thrown: number;
              };
              readonly wins: number;
              readonly losses: number;
            };
            readonly tb: {
              readonly kills: number;
              readonly deaths: number;
              readonly arrows: {
                readonly shot: number;
              };
              readonly melee: {
                readonly hits: number;
              };
              readonly goals: number;
              readonly streak: number;
              readonly best: {
                readonly streak: number;
              };
              readonly wins: number;
              readonly losses: number;
            };
            readonly tr: {
              readonly wins: number;
              readonly losses: number;
              readonly streak: number;
              readonly best: {
                readonly streak: number;
              };
              readonly blocks: {
                readonly dropped: number;
              };
              readonly time: {
                readonly record: number;
              };
            };
            readonly uhc: {
              readonly kills: number;
              readonly deaths: number;
              readonly wins: number;
              readonly iron: {
                readonly mined: number;
              };
              readonly gold: {
                readonly mined: number;
              };
              readonly lapis: {
                readonly mined: number;
              };
              readonly diamond: {
                readonly mined: number;
              };
            };
            readonly weekly: {
              readonly kills: number;
              readonly wins: number;
            };
          };
          readonly factionData?: {
            readonly tags: number;
            readonly registerDate: string;
            readonly coins: number;
            readonly kills: number;
            readonly bounty: number;
            readonly faction: {
              readonly id: number;
              readonly name: string;
              readonly strength: number;
              readonly allies: readonly string[];
              readonly leader?: unknown;
              readonly officers: readonly unknown[];
              readonly members: readonly unknown[];
            } | null;
          } | null;
          /** @default false */
          readonly leaderboard?: boolean;
          readonly punishmentsNew?: readonly {
            readonly id: string;
            /** @description The punishment `reasonName` and `reasonCategory` joined together. */
            readonly reason: string;
            /** @enum {string} */
            readonly reasonName:
              | 'Abusing Report System'
              | 'Advertisement Build'
              | 'Advertising Hack Clients'
              | 'Advertising Servers'
              | 'Advertising Websites & Services'
              | 'Anticheat Automatic Detection'
              | 'Auto Clicker'
              | 'Bug Exploiting'
              | 'Chargeback'
              | 'Credit Farming'
              | 'Cross Teaming'
              | 'Disrespect'
              | 'Explicit Build'
              | 'Fly'
              | 'Inappropriate Conduct'
              | 'Inappropriate Faction/Guild Name'
              | 'Inappropriate Language'
              | 'Inappropriate Nickname/Pet Name'
              | 'Inappropriate Skin'
              | 'Inappropriate Username'
              | 'Jump'
              | 'Key Mapper'
              | 'Kill Farming'
              | 'KillAura'
              | 'Night Vision'
              | 'Obstruction of Justice'
              | 'Other'
              | 'Player Tracer'
              | 'Punishment Evading'
              | 'Spamming'
              | 'Speed'
              | 'Staff Disrespect'
              | 'Team Trolling/Killing'
              | 'Teaming in Solo Mode'
              | 'Teleport Trapping'
              | 'Threat to Community'
              | 'Violent Build'
              | 'Xray';
            /** @enum {string} */
            readonly reasonCategory:
              | 'Abusive Communication'
              | 'Advertising'
              | 'Enforcement'
              | 'Factions & Guilds'
              | 'Hacking'
              | 'Inappropriate Behaviour'
              | 'Inappropriate Build'
              | 'Other'
              | 'Prohibited Addon/Mod'
              | 'Teaming';
            /** @enum {string} */
            readonly type: 'BAN' | 'MUTE';
            /** @description If true, the punishment does not expire. */
            readonly permanent: boolean;
            /** @description For migration punishments, this value is 0. */
            readonly issuedAt: number;
            /** @description If `permanent` is true, this value is -1. */
            readonly validUntil: number;
            /** @description Whether this punishment is currently active. */
            readonly active: boolean;
            /** @description The XUIDs affected by this punishment. */
            readonly affectedXuids: readonly string[];
            /** @description The corresponding player names to `affectedXuids`. */
            readonly affectedPlayers: readonly string[];
            readonly alt: boolean;
          }[];
          /** @enum {number} */
          readonly voteStatus?: 0 | 1 | 2;
          readonly winsData?: {
            readonly BH: number;
            readonly BW: number;
            readonly CQ: number;
            readonly Duels: number;
            readonly MM: number;
            readonly MS: number;
            readonly SC: number;
            readonly SG: number;
            readonly SW: number;
            readonly TB: number;
            readonly TR: number;
            readonly UHC: number;
            /**
             * @description Deprecated
             * @default 0
             */
            readonly Weekly?: number;
          };
          /** @description Deprecated, use `punishmentsNew` instead */
          readonly punishments: readonly unknown[];
          /** @description Deprecated, use `punishmentsNew` instead */
          readonly warnings: readonly unknown[];
        };
      }>;
    readonly SearchQuery: {
      readonly name: string;
    };
    readonly SearchFullTextResponse: Partial<
      readonly {
        /** @enum {string} */
        readonly type: 'faction';
        readonly name: string;
        readonly data?:
          | (Partial<unknown> &
              Partial<{
                readonly id: number;
                readonly name: string;
                readonly strength: number;
                readonly allies: readonly string[];
                readonly leader?: unknown;
                readonly officers: readonly unknown[];
                readonly members: readonly unknown[];
              }>)
          | null;
      }[]
    > &
      Partial<
        readonly {
          /** @enum {string} */
          readonly type: 'guild';
          readonly name: string;
          readonly data?:
            | (Partial<unknown> &
                Partial<{
                  readonly id: number;
                  readonly name: string;
                  readonly maxSize: number;
                  readonly memberCount: number;
                  readonly motd: string;
                  readonly position?: number;
                  readonly rawTag: string;
                  readonly tag: string | null;
                  /** @enum {string|null} */
                  readonly tagColor:
                    | (
                        | '#000000'
                        | '#0000aa'
                        | '#00aa00'
                        | '#00aaaa'
                        | '#aa0000'
                        | '#aa00aa'
                        | '#ffaa00'
                        | '#aaaaaa'
                        | '#555555'
                        | '#5555ff'
                        | '#55ff55'
                        | '#55ffff'
                        | '#ff5555'
                        | '#ff55ff'
                        | '#ffff55'
                        | '#ffffff'
                        | '#ddd605'
                      )
                    | null;
                  readonly xp: number;
                  readonly xpToNextLevel: number;
                  readonly level: number;
                  readonly leader?: unknown;
                  readonly officers: readonly unknown[];
                  readonly members: readonly unknown[];
                }>)
            | null;
        }[]
      > &
      Partial<
        readonly {
          /** @enum {string} */
          readonly type: 'player';
          readonly name: string;
          readonly rank: string;
          readonly data?:
            | (Partial<unknown> &
                Partial<{
                  readonly xuid: string;
                  readonly name: string;
                  /** Format: uri */
                  readonly avatar: string;
                  /** Format: uri */
                  readonly skin: string;
                  readonly skinData?: {
                    readonly skin: boolean;
                    /** @enum {string} */
                    readonly skinType: 'steve' | 'alex';
                    readonly skinVisibility: boolean;
                    readonly base64: string;
                    readonly raw: string | null;
                  };
                  readonly skinVisibility: boolean;
                  readonly bio: string;
                  readonly staff: boolean;
                  readonly flags: number;
                  readonly banned?: boolean;
                  readonly muted?: boolean;
                  readonly guild: string | null;
                  readonly guildData?:
                    | (Partial<unknown> &
                        Partial<{
                          readonly id: number;
                          readonly name: string;
                          readonly maxSize: number;
                          readonly memberCount: number;
                          readonly motd: string;
                          readonly position?: number;
                          readonly rawTag: string;
                          readonly tag: string | null;
                          /** @enum {string|null} */
                          readonly tagColor:
                            | (
                                | '#000000'
                                | '#0000aa'
                                | '#00aa00'
                                | '#00aaaa'
                                | '#aa0000'
                                | '#aa00aa'
                                | '#ffaa00'
                                | '#aaaaaa'
                                | '#555555'
                                | '#5555ff'
                                | '#55ff55'
                                | '#55ffff'
                                | '#ff5555'
                                | '#ff55ff'
                                | '#ffff55'
                                | '#ffffff'
                                | '#ddd605'
                              )
                            | null;
                          readonly xp: number;
                          readonly xpToNextLevel: number;
                          readonly level: number;
                          readonly leader?: unknown;
                          readonly officers: readonly unknown[];
                          readonly members: readonly unknown[];
                        }>)
                    | null;
                  readonly level: number;
                  readonly levelColors: readonly (
                    | '#000000'
                    | '#0000aa'
                    | '#00aa00'
                    | '#00aaaa'
                    | '#aa0000'
                    | '#aa00aa'
                    | '#ffaa00'
                    | '#aaaaaa'
                    | '#555555'
                    | '#5555ff'
                    | '#55ff55'
                    | '#55ffff'
                    | '#ff5555'
                    | '#ff55ff'
                    | '#ffff55'
                    | '#ffffff'
                    | '#ddd605'
                  )[];
                  /** @enum {string} */
                  readonly levelFormat: '§k' | '§l' | '§o' | '§r';
                  readonly formattedLevel: string;
                  readonly online?: boolean;
                  readonly credits: number;
                  readonly statusCredits: number;
                  readonly xp: number;
                  readonly xpToNextLevel: number;
                  readonly ranks: readonly (
                    | 'Owner'
                    | 'Director'
                    | 'Advisor'
                    | 'Community'
                    | 'Admin'
                    | 'Dev'
                    | 'Supervisor'
                    | 'Discord'
                    | 'Mod'
                    | 'Crew'
                    | 'Trainee'
                    | 'Builder'
                    | 'Designer'
                    | 'Game Designer'
                    | 'Media'
                    | 'Partner'
                    | 'Titan'
                    | 'Legend'
                    | 'Emerald'
                    | 'Ultra'
                    | 'Youtube'
                    | 'Tester'
                  )[];
                  readonly rankColors: readonly string[];
                  /** @enum {string|null} */
                  readonly tier: ('Silver' | 'Gold' | 'Guardian' | 'Eagle' | 'Elite') | null;
                  readonly tierColor: string | null;
                  readonly kills?: number;
                  readonly deaths?: number;
                  readonly kdr?: number;
                  readonly wins?: number;
                  readonly losses?: number;
                  readonly wlr?: number;
                  readonly firstJoin: string | null;
                  readonly firstJoined: number;
                  readonly lastJoin: string | null;
                  readonly lastJoined: number;
                  readonly lastSeen: string | null;
                  readonly lastServer: string;
                  readonly lastServerParsed: {
                    readonly region: string | null;
                    readonly serverName: string | null;
                    readonly serverNameLong: string | null;
                    readonly serverType: string | null;
                    readonly pretty: string;
                  };
                  /** @description Deprecated, use `discordId` instead */
                  readonly discordData: {readonly [key: string]: unknown};
                  readonly discordId: string | null;
                  readonly extra?: {
                    /** @default 0 */
                    readonly bhWins?: number;
                    /** @default 0 */
                    readonly bwKills?: number;
                    /** @default 0 */
                    readonly bwDeaths?: number;
                    /** @default 0 */
                    readonly bwSoloKills?: number;
                    /** @default 0 */
                    readonly bwSoloDeaths?: number;
                    /** @default 0 */
                    readonly bwDoublesKills?: number;
                    /** @default 0 */
                    readonly bwDoublesDeaths?: number;
                    /** @default 0 */
                    readonly bwTriosKills?: number;
                    /** @default 0 */
                    readonly bwTriosDeaths?: number;
                    /** @default 0 */
                    readonly bwSquadsKills?: number;
                    /** @default 0 */
                    readonly bwSquadsDeaths?: number;
                    /** @default 0 */
                    readonly bwBedsBroken?: number;
                    /** @default 0 */
                    readonly bwSoloBedsBroken?: number;
                    /** @default 0 */
                    readonly bwDoublesBedsBroken?: number;
                    /** @default 0 */
                    readonly bwTriosBedsBroken?: number;
                    /** @default 0 */
                    readonly bwSquadsBedsBroken?: number;
                    /** @default 0 */
                    readonly bwDiamondsCollected?: number;
                    /** @default 0 */
                    readonly bwEmeraldsCollected?: number;
                    /** @default 0 */
                    readonly bwGoldCollected?: number;
                    /** @default 0 */
                    readonly bwIronCollected?: number;
                    /** @default 0 */
                    readonly bwFinalKills?: number;
                    /** @default 0 */
                    readonly bwSoloFinalKills?: number;
                    /** @default 0 */
                    readonly bwDoublesFinalKills?: number;
                    /** @default 0 */
                    readonly bwTriosFinalKills?: number;
                    /** @default 0 */
                    readonly bwSquadsFinalKills?: number;
                    /** @default 0 */
                    readonly bwStreak?: number;
                    /** @default 0 */
                    readonly bwBestStreak?: number;
                    /** @default 0 */
                    readonly bwWins?: number;
                    /** @default 0 */
                    readonly bwSoloWins?: number;
                    /** @default 0 */
                    readonly bwDoublesWins?: number;
                    /** @default 0 */
                    readonly bwTriosWins?: number;
                    /** @default 0 */
                    readonly bwSquadsWins?: number;
                    /** @default 0 */
                    readonly cqKills?: number;
                    /** @default 0 */
                    readonly cqDeaths?: number;
                    /** @default 0 */
                    readonly cqWins?: number;
                    /** @default 0 */
                    readonly cqFlagsCollected?: number;
                    /** @default 0 */
                    readonly cqFlagsCaptured?: number;
                    /** @default 0 */
                    readonly cqFlagsReturned?: number;
                    /** @default 0 */
                    readonly cqDiamondsCollected?: number;
                    /** @default 0 */
                    readonly cqEmeraldsCollected?: number;
                    /** @default 0 */
                    readonly cqGoldCollected?: number;
                    /** @default 0 */
                    readonly cqIronCollected?: number;
                    /** @default 0 */
                    readonly duelsKills?: number;
                    /** @default 0 */
                    readonly duelsDeaths?: number;
                    /** @default 0 */
                    readonly duelsArrowsShot?: number;
                    /** @default 0 */
                    readonly duelsMeleeHits?: number;
                    /** @default 0 */
                    readonly duelsStreak?: number;
                    /** @default 0 */
                    readonly duelsBestStreak?: number;
                    /** @default 0 */
                    readonly duelsWins?: number;
                    /** @default 0 */
                    readonly duelsLosses?: number;
                    /** @default 0 */
                    readonly mmKills?: number;
                    /** @default 0 */
                    readonly mmDeaths?: number;
                    /** @default 0 */
                    readonly mmClassicKills?: number;
                    /** @default 0 */
                    readonly mmClassicDeaths?: number;
                    /**
                     * @description Not implemented yet.
                     * @default 0
                     */
                    readonly mmInfectionKills?: number;
                    /** @default 0 */
                    readonly mmInfectionDeaths?: number;
                    /** @default 0 */
                    readonly mmBowKills?: number;
                    /** @default 0 */
                    readonly mmKnifeKills?: number;
                    /** @default 0 */
                    readonly mmThrowKnifeKills?: number;
                    /** @default 0 */
                    readonly mmWins?: number;
                    /** @default 0 */
                    readonly mmClassicWins?: number;
                    /** @default 0 */
                    readonly mmInfectionWins?: number;
                    /** @default 0 */
                    readonly msSuccesses?: number;
                    /** @default 0 */
                    readonly msFails?: number;
                    /** @default 0 */
                    readonly msWins?: number;
                    /** @default 0 */
                    readonly scWins?: number;
                    /** @default 0 */
                    readonly scGoals?: number;
                    /** @default 0 */
                    readonly sgKills?: number;
                    /** @default 0 */
                    readonly sgDeaths?: number;
                    /** @default 0 */
                    readonly sgWins?: number;
                    /** @default 0 */
                    readonly swCoins?: number;
                    /** @default 0 */
                    readonly swKills?: number;
                    /** @default 0 */
                    readonly swDeaths?: number;
                    /** @default 0 */
                    readonly swSoloKills?: number;
                    /** @default 0 */
                    readonly swSoloDeaths?: number;
                    /** @default 0 */
                    readonly swSoloNormalKills?: number;
                    /** @default 0 */
                    readonly swSoloNormalDeaths?: number;
                    /** @default 0 */
                    readonly swSoloInsaneKills?: number;
                    /** @default 0 */
                    readonly swSoloInsaneDeaths?: number;
                    /** @default 0 */
                    readonly swDoublesKills?: number;
                    /** @default 0 */
                    readonly swDoublesDeaths?: number;
                    /** @default 0 */
                    readonly swDoublesNormalKills?: number;
                    /** @default 0 */
                    readonly swDoublesNormalDeaths?: number;
                    /** @default 0 */
                    readonly swDoublesInsaneKills?: number;
                    /** @default 0 */
                    readonly swDoublesInsaneDeaths?: number;
                    /** @default 0 */
                    readonly swBlocksBroken?: number;
                    /** @default 0 */
                    readonly swBlocksPlaced?: number;
                    /** @default 0 */
                    readonly swArrowsShot?: number;
                    /** @default 0 */
                    readonly swEggsThrown?: number;
                    /** @default 0 */
                    readonly swEpearlsThrown?: number;
                    /** @default 0 */
                    readonly swWins?: number;
                    /** @default 0 */
                    readonly swSoloWins?: number;
                    /** @default 0 */
                    readonly swDoublesWins?: number;
                    /** @default 0 */
                    readonly swLosses?: number;
                    /** @default 0 */
                    readonly swSoloLosses?: number;
                    /** @default 0 */
                    readonly swDoublesLosses?: number;
                    /** @default 0 */
                    readonly tbKills?: number;
                    /** @default 0 */
                    readonly tbDeaths?: number;
                    /** @default 0 */
                    readonly tbArrowsShot?: number;
                    /** @default 0 */
                    readonly tbMeleeHits?: number;
                    /** @default 0 */
                    readonly tbGoals?: number;
                    /** @default 0 */
                    readonly tbStreak?: number;
                    /** @default 0 */
                    readonly tbBestStreak?: number;
                    /** @default 0 */
                    readonly tbWins?: number;
                    /** @default 0 */
                    readonly tbLosses?: number;
                    /** @default 0 */
                    readonly trWins?: number;
                    /** @default 0 */
                    readonly trLosses?: number;
                    /** @default 0 */
                    readonly trStreak?: number;
                    /** @default 0 */
                    readonly trBestStreak?: number;
                    /** @default 0 */
                    readonly trBlocksDropped?: number;
                    /** @default 0 */
                    readonly trTimeRecord?: number;
                    /** @default 0 */
                    readonly weeklyKills?: number;
                    /** @default 0 */
                    readonly weeklyWins?: number;
                    /** @default 0 */
                    readonly uhcKills?: number;
                    /** @default 0 */
                    readonly uhcDeaths?: number;
                    /** @default 0 */
                    readonly uhcWins?: number;
                    /** @default 0 */
                    readonly uhcIronMined?: number;
                    /** @default 0 */
                    readonly uhcGoldMined?: number;
                    /** @default 0 */
                    readonly uhcLapisMined?: number;
                    /** @default 0 */
                    readonly uhcDiamondMined?: number;
                  };
                  readonly extraNested?: {
                    readonly bh: {
                      readonly wins: number;
                    };
                    readonly bw: {
                      readonly kills: number;
                      readonly deaths: number;
                      readonly solo: {
                        readonly kills: number;
                        readonly deaths: number;
                        readonly beds: {
                          readonly broken: number;
                        };
                        readonly final: {
                          readonly kills: number;
                        };
                        readonly wins: number;
                      };
                      readonly doubles: {
                        readonly kills: number;
                        readonly deaths: number;
                        readonly beds: {
                          readonly broken: number;
                        };
                        readonly final: {
                          readonly kills: number;
                        };
                        readonly wins: number;
                      };
                      readonly trios: {
                        readonly kills: number;
                        readonly deaths: number;
                        readonly beds: {
                          readonly broken: number;
                        };
                        readonly final: {
                          readonly kills: number;
                        };
                        readonly wins: number;
                      };
                      readonly squads: {
                        readonly kills: number;
                        readonly deaths: number;
                        readonly beds: {
                          readonly broken: number;
                        };
                        readonly final: {
                          readonly kills: number;
                        };
                        readonly wins: number;
                      };
                      readonly beds: {
                        readonly broken: number;
                      };
                      readonly diamonds: {
                        readonly collected: number;
                      };
                      readonly emeralds: {
                        readonly collected: number;
                      };
                      readonly gold: {
                        readonly collected: number;
                      };
                      readonly iron: {
                        readonly collected: number;
                      };
                      readonly final: {
                        readonly kills: number;
                      };
                      readonly streak: number;
                      readonly best: {
                        readonly streak: number;
                      };
                      readonly wins: number;
                    };
                    readonly cq: {
                      readonly kills: number;
                      readonly deaths: number;
                      readonly wins: number;
                      readonly flags: {
                        readonly collected: number;
                        readonly captured: number;
                        readonly returned: number;
                      };
                      readonly diamonds: {
                        readonly collected: number;
                      };
                      readonly emeralds: {
                        readonly collected: number;
                      };
                      readonly gold: {
                        readonly collected: number;
                      };
                      readonly iron: {
                        readonly collected: number;
                      };
                    };
                    readonly duels: {
                      readonly kills: number;
                      readonly deaths: number;
                      readonly arrows: {
                        readonly shot: number;
                      };
                      readonly melee: {
                        readonly hits: number;
                      };
                      readonly streak: number;
                      readonly best: {
                        readonly streak: number;
                      };
                      readonly wins: number;
                      readonly losses: number;
                    };
                    readonly mm: {
                      readonly kills: number;
                      readonly deaths: number;
                      readonly classic: {
                        readonly kills: number;
                        readonly deaths: number;
                        readonly wins: number;
                      };
                      readonly infection: {
                        /**
                         * @description Not implemented yet.
                         * @default 0
                         */
                        readonly kills?: number;
                        readonly deaths: number;
                        readonly wins: number;
                      };
                      readonly bow: {
                        readonly kills: number;
                      };
                      readonly knife: {
                        readonly kills: number;
                      };
                      readonly throw: {
                        readonly knife: {
                          readonly kills: number;
                        };
                      };
                      readonly wins: number;
                    };
                    readonly ms: {
                      readonly successes: number;
                      readonly fails: number;
                      readonly wins: number;
                    };
                    readonly sc: {
                      readonly wins: number;
                      readonly goals: number;
                    };
                    readonly sg: {
                      readonly kills: number;
                      readonly deaths: number;
                      readonly wins: number;
                    };
                    readonly sw: {
                      readonly coins: number;
                      readonly kills: number;
                      readonly deaths: number;
                      readonly solo: {
                        readonly kills: number;
                        readonly deaths: number;
                        readonly normal: {
                          readonly kills: number;
                          readonly deaths: number;
                        };
                        readonly insane: {
                          readonly kills: number;
                          readonly deaths: number;
                        };
                        readonly wins: number;
                        readonly losses: number;
                      };
                      readonly doubles: {
                        readonly kills: number;
                        readonly deaths: number;
                        readonly normal: {
                          readonly kills: number;
                          readonly deaths: number;
                        };
                        readonly insane: {
                          readonly kills: number;
                          readonly deaths: number;
                        };
                        readonly wins: number;
                        readonly losses: number;
                      };
                      readonly blocks: {
                        readonly broken: number;
                        readonly placed: number;
                      };
                      readonly arrows: {
                        readonly shot: number;
                      };
                      readonly eggs: {
                        readonly thrown: number;
                      };
                      readonly epearls: {
                        readonly thrown: number;
                      };
                      readonly wins: number;
                      readonly losses: number;
                    };
                    readonly tb: {
                      readonly kills: number;
                      readonly deaths: number;
                      readonly arrows: {
                        readonly shot: number;
                      };
                      readonly melee: {
                        readonly hits: number;
                      };
                      readonly goals: number;
                      readonly streak: number;
                      readonly best: {
                        readonly streak: number;
                      };
                      readonly wins: number;
                      readonly losses: number;
                    };
                    readonly tr: {
                      readonly wins: number;
                      readonly losses: number;
                      readonly streak: number;
                      readonly best: {
                        readonly streak: number;
                      };
                      readonly blocks: {
                        readonly dropped: number;
                      };
                      readonly time: {
                        readonly record: number;
                      };
                    };
                    readonly uhc: {
                      readonly kills: number;
                      readonly deaths: number;
                      readonly wins: number;
                      readonly iron: {
                        readonly mined: number;
                      };
                      readonly gold: {
                        readonly mined: number;
                      };
                      readonly lapis: {
                        readonly mined: number;
                      };
                      readonly diamond: {
                        readonly mined: number;
                      };
                    };
                    readonly weekly: {
                      readonly kills: number;
                      readonly wins: number;
                    };
                  };
                  readonly factionData?: {
                    readonly tags: number;
                    readonly registerDate: string;
                    readonly coins: number;
                    readonly kills: number;
                    readonly bounty: number;
                    readonly faction: {
                      readonly id: number;
                      readonly name: string;
                      readonly strength: number;
                      readonly allies: readonly string[];
                      readonly leader?: unknown;
                      readonly officers: readonly unknown[];
                      readonly members: readonly unknown[];
                    } | null;
                  } | null;
                  /** @default false */
                  readonly leaderboard?: boolean;
                  readonly punishmentsNew?: readonly {
                    readonly id: string;
                    /** @description The punishment `reasonName` and `reasonCategory` joined together. */
                    readonly reason: string;
                    /** @enum {string} */
                    readonly reasonName:
                      | 'Abusing Report System'
                      | 'Advertisement Build'
                      | 'Advertising Hack Clients'
                      | 'Advertising Servers'
                      | 'Advertising Websites & Services'
                      | 'Anticheat Automatic Detection'
                      | 'Auto Clicker'
                      | 'Bug Exploiting'
                      | 'Chargeback'
                      | 'Credit Farming'
                      | 'Cross Teaming'
                      | 'Disrespect'
                      | 'Explicit Build'
                      | 'Fly'
                      | 'Inappropriate Conduct'
                      | 'Inappropriate Faction/Guild Name'
                      | 'Inappropriate Language'
                      | 'Inappropriate Nickname/Pet Name'
                      | 'Inappropriate Skin'
                      | 'Inappropriate Username'
                      | 'Jump'
                      | 'Key Mapper'
                      | 'Kill Farming'
                      | 'KillAura'
                      | 'Night Vision'
                      | 'Obstruction of Justice'
                      | 'Other'
                      | 'Player Tracer'
                      | 'Punishment Evading'
                      | 'Spamming'
                      | 'Speed'
                      | 'Staff Disrespect'
                      | 'Team Trolling/Killing'
                      | 'Teaming in Solo Mode'
                      | 'Teleport Trapping'
                      | 'Threat to Community'
                      | 'Violent Build'
                      | 'Xray';
                    /** @enum {string} */
                    readonly reasonCategory:
                      | 'Abusive Communication'
                      | 'Advertising'
                      | 'Enforcement'
                      | 'Factions & Guilds'
                      | 'Hacking'
                      | 'Inappropriate Behaviour'
                      | 'Inappropriate Build'
                      | 'Other'
                      | 'Prohibited Addon/Mod'
                      | 'Teaming';
                    /** @enum {string} */
                    readonly type: 'BAN' | 'MUTE';
                    /** @description If true, the punishment does not expire. */
                    readonly permanent: boolean;
                    /** @description For migration punishments, this value is 0. */
                    readonly issuedAt: number;
                    /** @description If `permanent` is true, this value is -1. */
                    readonly validUntil: number;
                    /** @description Whether this punishment is currently active. */
                    readonly active: boolean;
                    /** @description The XUIDs affected by this punishment. */
                    readonly affectedXuids: readonly string[];
                    /** @description The corresponding player names to `affectedXuids`. */
                    readonly affectedPlayers: readonly string[];
                    readonly alt: boolean;
                  }[];
                  /** @enum {number} */
                  readonly voteStatus?: 0 | 1 | 2;
                  readonly winsData?: {
                    readonly BH: number;
                    readonly BW: number;
                    readonly CQ: number;
                    readonly Duels: number;
                    readonly MM: number;
                    readonly MS: number;
                    readonly SC: number;
                    readonly SG: number;
                    readonly SW: number;
                    readonly TB: number;
                    readonly TR: number;
                    readonly UHC: number;
                    /**
                     * @description Deprecated
                     * @default 0
                     */
                    readonly Weekly?: number;
                  };
                  /** @description Deprecated, use `punishmentsNew` instead */
                  readonly punishments: readonly unknown[];
                  /** @description Deprecated, use `punishmentsNew` instead */
                  readonly warnings: readonly unknown[];
                }>)
            | null;
        }[]
      >;
    readonly SearchFullTextQuery: {
      /** @default false */
      readonly expand?: boolean;
      /** @default true */
      readonly withFactionData?: boolean;
      /** @default false */
      readonly withGuildData?: boolean;
      /** @default true */
      readonly withOnline?: boolean;
      /** @default true */
      readonly withPunishments?: boolean;
      /** @default false */
      readonly withSkinData?: boolean;
      /** @default true */
      readonly withStats?: boolean;
      /** @default true */
      readonly withVoteStatus?: boolean;
      /** @default 100 */
      readonly limit?: number;
      readonly query: string;
      /** @enum {string} */
      readonly type?: 'faction' | 'guild' | 'player';
    };
    readonly RelayPaginationResponse: {
      readonly nodes: readonly unknown[];
      readonly edges: readonly {
        readonly cursor: string;
        readonly node?: unknown;
      }[];
      readonly pageInfo: {
        readonly hasNextPage: boolean;
        readonly hasPreviousPage: boolean;
        readonly startCursor?: string;
        readonly endCursor?: string;
      };
      readonly totalCount: number;
    };
    readonly RelayPaginationQueryPlayer: {
      /** @default false */
      readonly withStats?: boolean;
      readonly first?: number;
      readonly after?: string;
      readonly last?: number;
      readonly before?: string;
    };
    readonly RelayPaginationQueryGuild: {
      /** @default false */
      readonly expand?: boolean;
      /** @default false */
      readonly withStats?: boolean;
      readonly first?: number;
      readonly after?: string;
      readonly last?: number;
      readonly before?: string;
    };
    readonly RelayPaginationQueryFaction: {
      /** @default false */
      readonly expand?: boolean;
      /** @default false */
      readonly withStats?: boolean;
      readonly first?: number;
      readonly after?: string;
      readonly last?: number;
      readonly before?: string;
    };
    readonly ProductPlansResponse: readonly {
      readonly id: string;
      readonly productId: string;
      readonly name: string;
      /** @enum {number} */
      readonly type: 1 | 2;
      readonly flags: number;
      /** @enum {number|null} */
      readonly interval: (1 | 2) | null;
      readonly intervalCount: number | null;
      readonly unitAmount: number;
    }[];
    readonly ProductPlanResponse: {
      readonly id: string;
      readonly productId: string;
      readonly name: string;
      /** @enum {number} */
      readonly type: 1 | 2;
      readonly flags: number;
      /** @enum {number|null} */
      readonly interval: (1 | 2) | null;
      readonly intervalCount: number | null;
      readonly unitAmount: number;
    };
    readonly PlayerWinsData: {
      readonly BH: number;
      readonly BW: number;
      readonly CQ: number;
      readonly Duels: number;
      readonly MM: number;
      readonly MS: number;
      readonly SC: number;
      readonly SG: number;
      readonly SW: number;
      readonly TB: number;
      readonly TR: number;
      readonly UHC: number;
      /**
       * @description Deprecated
       * @default 0
       */
      readonly Weekly?: number;
    };
    readonly PlayerStatsResponse: {
      readonly [key: string]: {
        readonly credits: number;
        readonly deaths: number;
        readonly kills: number;
        readonly losses: number;
        readonly xp: number;
        readonly wins: {
          readonly total: number;
          readonly bh: number;
          readonly cq: number;
          readonly duels: number;
          readonly ms: number;
          readonly sc: number;
          readonly sg: number;
          readonly tb: number;
          readonly tr: number;
          readonly uhc: number;
          readonly bw: number;
          readonly mm: number;
          readonly sw: number;
        };
      };
    };
    readonly PlayerStatsQuery: {
      /**
       * @default 1
       * @enum {number}
       */
      readonly version?: 1;
      readonly periodStart: number;
      /** @default -1 */
      readonly periodEnd?: Partial<number> & Partial<-1>;
    };
    readonly PlayerSkinResponseData: {
      readonly skin: boolean;
      /** @enum {string} */
      readonly skinType: 'steve' | 'alex';
      readonly skinVisibility: boolean;
      readonly base64: string;
      readonly raw: string | null;
    };
    readonly PlayerSkinQuery: {
      /** @default false */
      readonly dataOnly?: boolean;
    };
    readonly PlayerResponse: {
      readonly xuid: string;
      readonly name: string;
      /** Format: uri */
      readonly avatar: string;
      /** Format: uri */
      readonly skin: string;
      readonly skinData?: {
        readonly skin: boolean;
        /** @enum {string} */
        readonly skinType: 'steve' | 'alex';
        readonly skinVisibility: boolean;
        readonly base64: string;
        readonly raw: string | null;
      };
      readonly skinVisibility: boolean;
      readonly bio: string;
      readonly staff: boolean;
      readonly flags: number;
      readonly banned?: boolean;
      readonly muted?: boolean;
      readonly guild: string | null;
      readonly guildData?:
        | (Partial<unknown> &
            Partial<{
              readonly id: number;
              readonly name: string;
              readonly maxSize: number;
              readonly memberCount: number;
              readonly motd: string;
              readonly position?: number;
              readonly rawTag: string;
              readonly tag: string | null;
              /** @enum {string|null} */
              readonly tagColor:
                | (
                    | '#000000'
                    | '#0000aa'
                    | '#00aa00'
                    | '#00aaaa'
                    | '#aa0000'
                    | '#aa00aa'
                    | '#ffaa00'
                    | '#aaaaaa'
                    | '#555555'
                    | '#5555ff'
                    | '#55ff55'
                    | '#55ffff'
                    | '#ff5555'
                    | '#ff55ff'
                    | '#ffff55'
                    | '#ffffff'
                    | '#ddd605'
                  )
                | null;
              readonly xp: number;
              readonly xpToNextLevel: number;
              readonly level: number;
              readonly leader?: unknown;
              readonly officers: readonly unknown[];
              readonly members: readonly unknown[];
            }>)
        | null;
      readonly level: number;
      readonly levelColors: readonly (
        | '#000000'
        | '#0000aa'
        | '#00aa00'
        | '#00aaaa'
        | '#aa0000'
        | '#aa00aa'
        | '#ffaa00'
        | '#aaaaaa'
        | '#555555'
        | '#5555ff'
        | '#55ff55'
        | '#55ffff'
        | '#ff5555'
        | '#ff55ff'
        | '#ffff55'
        | '#ffffff'
        | '#ddd605'
      )[];
      /** @enum {string} */
      readonly levelFormat: '§k' | '§l' | '§o' | '§r';
      readonly formattedLevel: string;
      readonly online?: boolean;
      readonly credits: number;
      readonly statusCredits: number;
      readonly xp: number;
      readonly xpToNextLevel: number;
      readonly ranks: readonly (
        | 'Owner'
        | 'Director'
        | 'Advisor'
        | 'Community'
        | 'Admin'
        | 'Dev'
        | 'Supervisor'
        | 'Discord'
        | 'Mod'
        | 'Crew'
        | 'Trainee'
        | 'Builder'
        | 'Designer'
        | 'Game Designer'
        | 'Media'
        | 'Partner'
        | 'Titan'
        | 'Legend'
        | 'Emerald'
        | 'Ultra'
        | 'Youtube'
        | 'Tester'
      )[];
      readonly rankColors: readonly string[];
      /** @enum {string|null} */
      readonly tier: ('Silver' | 'Gold' | 'Guardian' | 'Eagle' | 'Elite') | null;
      readonly tierColor: string | null;
      readonly kills?: number;
      readonly deaths?: number;
      readonly kdr?: number;
      readonly wins?: number;
      readonly losses?: number;
      readonly wlr?: number;
      readonly firstJoin: string | null;
      readonly firstJoined: number;
      readonly lastJoin: string | null;
      readonly lastJoined: number;
      readonly lastSeen: string | null;
      readonly lastServer: string;
      readonly lastServerParsed: {
        readonly region: string | null;
        readonly serverName: string | null;
        readonly serverNameLong: string | null;
        readonly serverType: string | null;
        readonly pretty: string;
      };
      /** @description Deprecated, use `discordId` instead */
      readonly discordData: {readonly [key: string]: unknown};
      readonly discordId: string | null;
      readonly extra?: {
        /** @default 0 */
        readonly bhWins?: number;
        /** @default 0 */
        readonly bwKills?: number;
        /** @default 0 */
        readonly bwDeaths?: number;
        /** @default 0 */
        readonly bwSoloKills?: number;
        /** @default 0 */
        readonly bwSoloDeaths?: number;
        /** @default 0 */
        readonly bwDoublesKills?: number;
        /** @default 0 */
        readonly bwDoublesDeaths?: number;
        /** @default 0 */
        readonly bwTriosKills?: number;
        /** @default 0 */
        readonly bwTriosDeaths?: number;
        /** @default 0 */
        readonly bwSquadsKills?: number;
        /** @default 0 */
        readonly bwSquadsDeaths?: number;
        /** @default 0 */
        readonly bwBedsBroken?: number;
        /** @default 0 */
        readonly bwSoloBedsBroken?: number;
        /** @default 0 */
        readonly bwDoublesBedsBroken?: number;
        /** @default 0 */
        readonly bwTriosBedsBroken?: number;
        /** @default 0 */
        readonly bwSquadsBedsBroken?: number;
        /** @default 0 */
        readonly bwDiamondsCollected?: number;
        /** @default 0 */
        readonly bwEmeraldsCollected?: number;
        /** @default 0 */
        readonly bwGoldCollected?: number;
        /** @default 0 */
        readonly bwIronCollected?: number;
        /** @default 0 */
        readonly bwFinalKills?: number;
        /** @default 0 */
        readonly bwSoloFinalKills?: number;
        /** @default 0 */
        readonly bwDoublesFinalKills?: number;
        /** @default 0 */
        readonly bwTriosFinalKills?: number;
        /** @default 0 */
        readonly bwSquadsFinalKills?: number;
        /** @default 0 */
        readonly bwStreak?: number;
        /** @default 0 */
        readonly bwBestStreak?: number;
        /** @default 0 */
        readonly bwWins?: number;
        /** @default 0 */
        readonly bwSoloWins?: number;
        /** @default 0 */
        readonly bwDoublesWins?: number;
        /** @default 0 */
        readonly bwTriosWins?: number;
        /** @default 0 */
        readonly bwSquadsWins?: number;
        /** @default 0 */
        readonly cqKills?: number;
        /** @default 0 */
        readonly cqDeaths?: number;
        /** @default 0 */
        readonly cqWins?: number;
        /** @default 0 */
        readonly cqFlagsCollected?: number;
        /** @default 0 */
        readonly cqFlagsCaptured?: number;
        /** @default 0 */
        readonly cqFlagsReturned?: number;
        /** @default 0 */
        readonly cqDiamondsCollected?: number;
        /** @default 0 */
        readonly cqEmeraldsCollected?: number;
        /** @default 0 */
        readonly cqGoldCollected?: number;
        /** @default 0 */
        readonly cqIronCollected?: number;
        /** @default 0 */
        readonly duelsKills?: number;
        /** @default 0 */
        readonly duelsDeaths?: number;
        /** @default 0 */
        readonly duelsArrowsShot?: number;
        /** @default 0 */
        readonly duelsMeleeHits?: number;
        /** @default 0 */
        readonly duelsStreak?: number;
        /** @default 0 */
        readonly duelsBestStreak?: number;
        /** @default 0 */
        readonly duelsWins?: number;
        /** @default 0 */
        readonly duelsLosses?: number;
        /** @default 0 */
        readonly mmKills?: number;
        /** @default 0 */
        readonly mmDeaths?: number;
        /** @default 0 */
        readonly mmClassicKills?: number;
        /** @default 0 */
        readonly mmClassicDeaths?: number;
        /**
         * @description Not implemented yet.
         * @default 0
         */
        readonly mmInfectionKills?: number;
        /** @default 0 */
        readonly mmInfectionDeaths?: number;
        /** @default 0 */
        readonly mmBowKills?: number;
        /** @default 0 */
        readonly mmKnifeKills?: number;
        /** @default 0 */
        readonly mmThrowKnifeKills?: number;
        /** @default 0 */
        readonly mmWins?: number;
        /** @default 0 */
        readonly mmClassicWins?: number;
        /** @default 0 */
        readonly mmInfectionWins?: number;
        /** @default 0 */
        readonly msSuccesses?: number;
        /** @default 0 */
        readonly msFails?: number;
        /** @default 0 */
        readonly msWins?: number;
        /** @default 0 */
        readonly scWins?: number;
        /** @default 0 */
        readonly scGoals?: number;
        /** @default 0 */
        readonly sgKills?: number;
        /** @default 0 */
        readonly sgDeaths?: number;
        /** @default 0 */
        readonly sgWins?: number;
        /** @default 0 */
        readonly swCoins?: number;
        /** @default 0 */
        readonly swKills?: number;
        /** @default 0 */
        readonly swDeaths?: number;
        /** @default 0 */
        readonly swSoloKills?: number;
        /** @default 0 */
        readonly swSoloDeaths?: number;
        /** @default 0 */
        readonly swSoloNormalKills?: number;
        /** @default 0 */
        readonly swSoloNormalDeaths?: number;
        /** @default 0 */
        readonly swSoloInsaneKills?: number;
        /** @default 0 */
        readonly swSoloInsaneDeaths?: number;
        /** @default 0 */
        readonly swDoublesKills?: number;
        /** @default 0 */
        readonly swDoublesDeaths?: number;
        /** @default 0 */
        readonly swDoublesNormalKills?: number;
        /** @default 0 */
        readonly swDoublesNormalDeaths?: number;
        /** @default 0 */
        readonly swDoublesInsaneKills?: number;
        /** @default 0 */
        readonly swDoublesInsaneDeaths?: number;
        /** @default 0 */
        readonly swBlocksBroken?: number;
        /** @default 0 */
        readonly swBlocksPlaced?: number;
        /** @default 0 */
        readonly swArrowsShot?: number;
        /** @default 0 */
        readonly swEggsThrown?: number;
        /** @default 0 */
        readonly swEpearlsThrown?: number;
        /** @default 0 */
        readonly swWins?: number;
        /** @default 0 */
        readonly swSoloWins?: number;
        /** @default 0 */
        readonly swDoublesWins?: number;
        /** @default 0 */
        readonly swLosses?: number;
        /** @default 0 */
        readonly swSoloLosses?: number;
        /** @default 0 */
        readonly swDoublesLosses?: number;
        /** @default 0 */
        readonly tbKills?: number;
        /** @default 0 */
        readonly tbDeaths?: number;
        /** @default 0 */
        readonly tbArrowsShot?: number;
        /** @default 0 */
        readonly tbMeleeHits?: number;
        /** @default 0 */
        readonly tbGoals?: number;
        /** @default 0 */
        readonly tbStreak?: number;
        /** @default 0 */
        readonly tbBestStreak?: number;
        /** @default 0 */
        readonly tbWins?: number;
        /** @default 0 */
        readonly tbLosses?: number;
        /** @default 0 */
        readonly trWins?: number;
        /** @default 0 */
        readonly trLosses?: number;
        /** @default 0 */
        readonly trStreak?: number;
        /** @default 0 */
        readonly trBestStreak?: number;
        /** @default 0 */
        readonly trBlocksDropped?: number;
        /** @default 0 */
        readonly trTimeRecord?: number;
        /** @default 0 */
        readonly weeklyKills?: number;
        /** @default 0 */
        readonly weeklyWins?: number;
        /** @default 0 */
        readonly uhcKills?: number;
        /** @default 0 */
        readonly uhcDeaths?: number;
        /** @default 0 */
        readonly uhcWins?: number;
        /** @default 0 */
        readonly uhcIronMined?: number;
        /** @default 0 */
        readonly uhcGoldMined?: number;
        /** @default 0 */
        readonly uhcLapisMined?: number;
        /** @default 0 */
        readonly uhcDiamondMined?: number;
      };
      readonly extraNested?: {
        readonly bh: {
          readonly wins: number;
        };
        readonly bw: {
          readonly kills: number;
          readonly deaths: number;
          readonly solo: {
            readonly kills: number;
            readonly deaths: number;
            readonly beds: {
              readonly broken: number;
            };
            readonly final: {
              readonly kills: number;
            };
            readonly wins: number;
          };
          readonly doubles: {
            readonly kills: number;
            readonly deaths: number;
            readonly beds: {
              readonly broken: number;
            };
            readonly final: {
              readonly kills: number;
            };
            readonly wins: number;
          };
          readonly trios: {
            readonly kills: number;
            readonly deaths: number;
            readonly beds: {
              readonly broken: number;
            };
            readonly final: {
              readonly kills: number;
            };
            readonly wins: number;
          };
          readonly squads: {
            readonly kills: number;
            readonly deaths: number;
            readonly beds: {
              readonly broken: number;
            };
            readonly final: {
              readonly kills: number;
            };
            readonly wins: number;
          };
          readonly beds: {
            readonly broken: number;
          };
          readonly diamonds: {
            readonly collected: number;
          };
          readonly emeralds: {
            readonly collected: number;
          };
          readonly gold: {
            readonly collected: number;
          };
          readonly iron: {
            readonly collected: number;
          };
          readonly final: {
            readonly kills: number;
          };
          readonly streak: number;
          readonly best: {
            readonly streak: number;
          };
          readonly wins: number;
        };
        readonly cq: {
          readonly kills: number;
          readonly deaths: number;
          readonly wins: number;
          readonly flags: {
            readonly collected: number;
            readonly captured: number;
            readonly returned: number;
          };
          readonly diamonds: {
            readonly collected: number;
          };
          readonly emeralds: {
            readonly collected: number;
          };
          readonly gold: {
            readonly collected: number;
          };
          readonly iron: {
            readonly collected: number;
          };
        };
        readonly duels: {
          readonly kills: number;
          readonly deaths: number;
          readonly arrows: {
            readonly shot: number;
          };
          readonly melee: {
            readonly hits: number;
          };
          readonly streak: number;
          readonly best: {
            readonly streak: number;
          };
          readonly wins: number;
          readonly losses: number;
        };
        readonly mm: {
          readonly kills: number;
          readonly deaths: number;
          readonly classic: {
            readonly kills: number;
            readonly deaths: number;
            readonly wins: number;
          };
          readonly infection: {
            /**
             * @description Not implemented yet.
             * @default 0
             */
            readonly kills?: number;
            readonly deaths: number;
            readonly wins: number;
          };
          readonly bow: {
            readonly kills: number;
          };
          readonly knife: {
            readonly kills: number;
          };
          readonly throw: {
            readonly knife: {
              readonly kills: number;
            };
          };
          readonly wins: number;
        };
        readonly ms: {
          readonly successes: number;
          readonly fails: number;
          readonly wins: number;
        };
        readonly sc: {
          readonly wins: number;
          readonly goals: number;
        };
        readonly sg: {
          readonly kills: number;
          readonly deaths: number;
          readonly wins: number;
        };
        readonly sw: {
          readonly coins: number;
          readonly kills: number;
          readonly deaths: number;
          readonly solo: {
            readonly kills: number;
            readonly deaths: number;
            readonly normal: {
              readonly kills: number;
              readonly deaths: number;
            };
            readonly insane: {
              readonly kills: number;
              readonly deaths: number;
            };
            readonly wins: number;
            readonly losses: number;
          };
          readonly doubles: {
            readonly kills: number;
            readonly deaths: number;
            readonly normal: {
              readonly kills: number;
              readonly deaths: number;
            };
            readonly insane: {
              readonly kills: number;
              readonly deaths: number;
            };
            readonly wins: number;
            readonly losses: number;
          };
          readonly blocks: {
            readonly broken: number;
            readonly placed: number;
          };
          readonly arrows: {
            readonly shot: number;
          };
          readonly eggs: {
            readonly thrown: number;
          };
          readonly epearls: {
            readonly thrown: number;
          };
          readonly wins: number;
          readonly losses: number;
        };
        readonly tb: {
          readonly kills: number;
          readonly deaths: number;
          readonly arrows: {
            readonly shot: number;
          };
          readonly melee: {
            readonly hits: number;
          };
          readonly goals: number;
          readonly streak: number;
          readonly best: {
            readonly streak: number;
          };
          readonly wins: number;
          readonly losses: number;
        };
        readonly tr: {
          readonly wins: number;
          readonly losses: number;
          readonly streak: number;
          readonly best: {
            readonly streak: number;
          };
          readonly blocks: {
            readonly dropped: number;
          };
          readonly time: {
            readonly record: number;
          };
        };
        readonly uhc: {
          readonly kills: number;
          readonly deaths: number;
          readonly wins: number;
          readonly iron: {
            readonly mined: number;
          };
          readonly gold: {
            readonly mined: number;
          };
          readonly lapis: {
            readonly mined: number;
          };
          readonly diamond: {
            readonly mined: number;
          };
        };
        readonly weekly: {
          readonly kills: number;
          readonly wins: number;
        };
      };
      readonly factionData?: {
        readonly tags: number;
        readonly registerDate: string;
        readonly coins: number;
        readonly kills: number;
        readonly bounty: number;
        readonly faction: {
          readonly id: number;
          readonly name: string;
          readonly strength: number;
          readonly allies: readonly string[];
          readonly leader?: unknown;
          readonly officers: readonly unknown[];
          readonly members: readonly unknown[];
        } | null;
      } | null;
      /** @default false */
      readonly leaderboard?: boolean;
      readonly punishmentsNew?: readonly {
        readonly id: string;
        /** @description The punishment `reasonName` and `reasonCategory` joined together. */
        readonly reason: string;
        /** @enum {string} */
        readonly reasonName:
          | 'Abusing Report System'
          | 'Advertisement Build'
          | 'Advertising Hack Clients'
          | 'Advertising Servers'
          | 'Advertising Websites & Services'
          | 'Anticheat Automatic Detection'
          | 'Auto Clicker'
          | 'Bug Exploiting'
          | 'Chargeback'
          | 'Credit Farming'
          | 'Cross Teaming'
          | 'Disrespect'
          | 'Explicit Build'
          | 'Fly'
          | 'Inappropriate Conduct'
          | 'Inappropriate Faction/Guild Name'
          | 'Inappropriate Language'
          | 'Inappropriate Nickname/Pet Name'
          | 'Inappropriate Skin'
          | 'Inappropriate Username'
          | 'Jump'
          | 'Key Mapper'
          | 'Kill Farming'
          | 'KillAura'
          | 'Night Vision'
          | 'Obstruction of Justice'
          | 'Other'
          | 'Player Tracer'
          | 'Punishment Evading'
          | 'Spamming'
          | 'Speed'
          | 'Staff Disrespect'
          | 'Team Trolling/Killing'
          | 'Teaming in Solo Mode'
          | 'Teleport Trapping'
          | 'Threat to Community'
          | 'Violent Build'
          | 'Xray';
        /** @enum {string} */
        readonly reasonCategory:
          | 'Abusive Communication'
          | 'Advertising'
          | 'Enforcement'
          | 'Factions & Guilds'
          | 'Hacking'
          | 'Inappropriate Behaviour'
          | 'Inappropriate Build'
          | 'Other'
          | 'Prohibited Addon/Mod'
          | 'Teaming';
        /** @enum {string} */
        readonly type: 'BAN' | 'MUTE';
        /** @description If true, the punishment does not expire. */
        readonly permanent: boolean;
        /** @description For migration punishments, this value is 0. */
        readonly issuedAt: number;
        /** @description If `permanent` is true, this value is -1. */
        readonly validUntil: number;
        /** @description Whether this punishment is currently active. */
        readonly active: boolean;
        /** @description The XUIDs affected by this punishment. */
        readonly affectedXuids: readonly string[];
        /** @description The corresponding player names to `affectedXuids`. */
        readonly affectedPlayers: readonly string[];
        readonly alt: boolean;
      }[];
      /** @enum {number} */
      readonly voteStatus?: 0 | 1 | 2;
      readonly winsData?: {
        readonly BH: number;
        readonly BW: number;
        readonly CQ: number;
        readonly Duels: number;
        readonly MM: number;
        readonly MS: number;
        readonly SC: number;
        readonly SG: number;
        readonly SW: number;
        readonly TB: number;
        readonly TR: number;
        readonly UHC: number;
        /**
         * @description Deprecated
         * @default 0
         */
        readonly Weekly?: number;
      };
      /** @description Deprecated, use `punishmentsNew` instead */
      readonly punishments: readonly unknown[];
      /** @description Deprecated, use `punishmentsNew` instead */
      readonly warnings: readonly unknown[];
    };
    readonly PlayerQuery: {
      /** @default false */
      readonly expand?: boolean;
      /** @default true */
      readonly withFactionData?: boolean;
      /** @default false */
      readonly withGuildData?: boolean;
      /** @default true */
      readonly withOnline?: boolean;
      /** @default true */
      readonly withPunishments?: boolean;
      /** @default false */
      readonly withSkinData?: boolean;
      /** @default true */
      readonly withStats?: boolean;
      /** @default true */
      readonly withVoteStatus?: boolean;
    };
    readonly PlayerPunishmentsResponse: {
      readonly xuid: string;
      readonly name: string;
      readonly punishments: readonly {
        readonly id: string;
        /** @description The punishment `reasonName` and `reasonCategory` joined together. */
        readonly reason: string;
        /** @enum {string} */
        readonly reasonName:
          | 'Abusing Report System'
          | 'Advertisement Build'
          | 'Advertising Hack Clients'
          | 'Advertising Servers'
          | 'Advertising Websites & Services'
          | 'Anticheat Automatic Detection'
          | 'Auto Clicker'
          | 'Bug Exploiting'
          | 'Chargeback'
          | 'Credit Farming'
          | 'Cross Teaming'
          | 'Disrespect'
          | 'Explicit Build'
          | 'Fly'
          | 'Inappropriate Conduct'
          | 'Inappropriate Faction/Guild Name'
          | 'Inappropriate Language'
          | 'Inappropriate Nickname/Pet Name'
          | 'Inappropriate Skin'
          | 'Inappropriate Username'
          | 'Jump'
          | 'Key Mapper'
          | 'Kill Farming'
          | 'KillAura'
          | 'Night Vision'
          | 'Obstruction of Justice'
          | 'Other'
          | 'Player Tracer'
          | 'Punishment Evading'
          | 'Spamming'
          | 'Speed'
          | 'Staff Disrespect'
          | 'Team Trolling/Killing'
          | 'Teaming in Solo Mode'
          | 'Teleport Trapping'
          | 'Threat to Community'
          | 'Violent Build'
          | 'Xray';
        /** @enum {string} */
        readonly reasonCategory:
          | 'Abusive Communication'
          | 'Advertising'
          | 'Enforcement'
          | 'Factions & Guilds'
          | 'Hacking'
          | 'Inappropriate Behaviour'
          | 'Inappropriate Build'
          | 'Other'
          | 'Prohibited Addon/Mod'
          | 'Teaming';
        /** @enum {string} */
        readonly type: 'BAN' | 'MUTE';
        /** @description If true, the punishment does not expire. */
        readonly permanent: boolean;
        /** @description For migration punishments, this value is 0. */
        readonly issuedAt: number;
        /** @description If `permanent` is true, this value is -1. */
        readonly validUntil: number;
        /** @description Whether this punishment is currently active. */
        readonly active: boolean;
        /** @description The XUIDs affected by this punishment. */
        readonly affectedXuids: readonly string[];
        /** @description The corresponding player names to `affectedXuids`. */
        readonly affectedPlayers: readonly string[];
        readonly alt: boolean;
      }[];
    };
    readonly PlayerPunishmentResponse: {
      readonly id: string;
      /** @description The punishment `reasonName` and `reasonCategory` joined together. */
      readonly reason: string;
      /** @enum {string} */
      readonly reasonName:
        | 'Abusing Report System'
        | 'Advertisement Build'
        | 'Advertising Hack Clients'
        | 'Advertising Servers'
        | 'Advertising Websites & Services'
        | 'Anticheat Automatic Detection'
        | 'Auto Clicker'
        | 'Bug Exploiting'
        | 'Chargeback'
        | 'Credit Farming'
        | 'Cross Teaming'
        | 'Disrespect'
        | 'Explicit Build'
        | 'Fly'
        | 'Inappropriate Conduct'
        | 'Inappropriate Faction/Guild Name'
        | 'Inappropriate Language'
        | 'Inappropriate Nickname/Pet Name'
        | 'Inappropriate Skin'
        | 'Inappropriate Username'
        | 'Jump'
        | 'Key Mapper'
        | 'Kill Farming'
        | 'KillAura'
        | 'Night Vision'
        | 'Obstruction of Justice'
        | 'Other'
        | 'Player Tracer'
        | 'Punishment Evading'
        | 'Spamming'
        | 'Speed'
        | 'Staff Disrespect'
        | 'Team Trolling/Killing'
        | 'Teaming in Solo Mode'
        | 'Teleport Trapping'
        | 'Threat to Community'
        | 'Violent Build'
        | 'Xray';
      /** @enum {string} */
      readonly reasonCategory:
        | 'Abusive Communication'
        | 'Advertising'
        | 'Enforcement'
        | 'Factions & Guilds'
        | 'Hacking'
        | 'Inappropriate Behaviour'
        | 'Inappropriate Build'
        | 'Other'
        | 'Prohibited Addon/Mod'
        | 'Teaming';
      /** @enum {string} */
      readonly type: 'BAN' | 'MUTE';
      /** @description If true, the punishment does not expire. */
      readonly permanent: boolean;
      /** @description For migration punishments, this value is 0. */
      readonly issuedAt: number;
      /** @description If `permanent` is true, this value is -1. */
      readonly validUntil: number;
      /** @description Whether this punishment is currently active. */
      readonly active: boolean;
      /** @description The XUIDs affected by this punishment. */
      readonly affectedXuids: readonly string[];
      /** @description The corresponding player names to `affectedXuids`. */
      readonly affectedPlayers: readonly string[];
      readonly alt: boolean;
    };
    readonly PlayerLeaderboardResponse: {
      readonly player: string;
      readonly data: {
        readonly bhWins: number;
        readonly bwBedsBroken: number;
        readonly bwDoublesBedsBroken: number;
        readonly bwDoublesFinalKills: number;
        readonly bwDoublesKills: number;
        readonly bwDoublesWins: number;
        readonly bwFinalKills: number;
        readonly bwKills: number;
        readonly bwSoloBedsBroken: number;
        readonly bwSoloFinalKills: number;
        readonly bwSoloKills: number;
        readonly bwSoloWins: number;
        readonly bwSquadsBedsBroken: number;
        readonly bwSquadsFinalKills: number;
        readonly bwSquadsKills: number;
        readonly bwSquadsWins: number;
        readonly bwTriosBedsBroken: number;
        readonly bwTriosFinalKills: number;
        readonly bwTriosKills: number;
        readonly bwTriosWins: number;
        readonly bwWins: number;
        readonly cqFlagsCaptured: number;
        readonly cqKills: number;
        readonly cqWins: number;
        readonly duelsKills: number;
        readonly duelsWins: number;
        readonly kills: number;
        readonly mmBowKills: number;
        readonly mmClassicKills: number;
        readonly mmClassicWins: number;
        /**
         * @description Not implemented yet.
         * @default 0
         */
        readonly mmInfectionKills?: number;
        readonly mmInfectionWins: number;
        readonly mmKills: number;
        readonly mmKnifeKills: number;
        readonly mmThrowKnifeKills: number;
        readonly mmWins: number;
        readonly msWins: number;
        readonly scWins: number;
        readonly sgKills: number;
        readonly sgWins: number;
        readonly swDoublesInsaneKills: number;
        readonly swDoublesKills: number;
        readonly swDoublesNormalKills: number;
        readonly swDoublesWins: number;
        readonly swKills: number;
        readonly swSoloInsaneKills: number;
        readonly swSoloKills: number;
        readonly swSoloNormalKills: number;
        readonly swSoloWins: number;
        readonly swWins: number;
        readonly tbKills: number;
        readonly tbWins: number;
        readonly wins: number;
      };
      readonly dataNested: {
        readonly bh: {
          readonly wins: number;
        };
        readonly bw: {
          readonly beds: {
            readonly broken: number;
          };
          readonly doubles: {
            readonly beds: {
              readonly broken: number;
            };
            readonly final: {
              readonly kills: number;
            };
            readonly kills: number;
            readonly wins: number;
          };
          readonly final: {
            readonly kills: number;
          };
          readonly kills: number;
          readonly solo: {
            readonly beds: {
              readonly broken: number;
            };
            readonly final: {
              readonly kills: number;
            };
            readonly kills: number;
            readonly wins: number;
          };
          readonly squads: {
            readonly beds: {
              readonly broken: number;
            };
            readonly final: {
              readonly kills: number;
            };
            readonly kills: number;
            readonly wins: number;
          };
          readonly trios: {
            readonly beds: {
              readonly broken: number;
            };
            readonly final: {
              readonly kills: number;
            };
            readonly kills: number;
            readonly wins: number;
          };
          readonly wins: number;
        };
        readonly cq: {
          readonly flags: {
            readonly captured: number;
          };
          readonly kills: number;
          readonly wins: number;
        };
        readonly duels: {
          readonly kills: number;
          readonly wins: number;
        };
        readonly kills: number;
        readonly mm: {
          readonly bow: {
            readonly kills: number;
          };
          readonly classic: {
            readonly kills: number;
            readonly wins: number;
          };
          readonly infection: {
            /**
             * @description Not implemented yet.
             * @default 0
             */
            readonly kills?: number;
            readonly wins: number;
          };
          readonly kills: number;
          readonly knife: {
            readonly kills: number;
          };
          readonly throw: {
            readonly knife: {
              readonly kills: number;
            };
          };
          readonly wins: number;
        };
        readonly ms: {
          readonly wins: number;
        };
        readonly sc: {
          readonly wins: number;
        };
        readonly sg: {
          readonly kills: number;
          readonly wins: number;
        };
        readonly sw: {
          readonly doubles: {
            readonly insane: {
              readonly kills: number;
            };
            readonly kills: number;
            readonly normal: {
              readonly kills: number;
            };
            readonly wins: number;
          };
          readonly kills: number;
          readonly solo: {
            readonly insane: {
              readonly kills: number;
            };
            readonly kills: number;
            readonly normal: {
              readonly kills: number;
            };
            readonly wins: number;
          };
          readonly wins: number;
        };
        readonly tb: {
          readonly kills: number;
          readonly wins: number;
        };
        readonly wins: number;
      };
      readonly timestamp: number;
    };
    readonly PlayerLeaderboardDataNested: {
      readonly bh: {
        readonly wins: number;
      };
      readonly bw: {
        readonly beds: {
          readonly broken: number;
        };
        readonly doubles: {
          readonly beds: {
            readonly broken: number;
          };
          readonly final: {
            readonly kills: number;
          };
          readonly kills: number;
          readonly wins: number;
        };
        readonly final: {
          readonly kills: number;
        };
        readonly kills: number;
        readonly solo: {
          readonly beds: {
            readonly broken: number;
          };
          readonly final: {
            readonly kills: number;
          };
          readonly kills: number;
          readonly wins: number;
        };
        readonly squads: {
          readonly beds: {
            readonly broken: number;
          };
          readonly final: {
            readonly kills: number;
          };
          readonly kills: number;
          readonly wins: number;
        };
        readonly trios: {
          readonly beds: {
            readonly broken: number;
          };
          readonly final: {
            readonly kills: number;
          };
          readonly kills: number;
          readonly wins: number;
        };
        readonly wins: number;
      };
      readonly cq: {
        readonly flags: {
          readonly captured: number;
        };
        readonly kills: number;
        readonly wins: number;
      };
      readonly duels: {
        readonly kills: number;
        readonly wins: number;
      };
      readonly kills: number;
      readonly mm: {
        readonly bow: {
          readonly kills: number;
        };
        readonly classic: {
          readonly kills: number;
          readonly wins: number;
        };
        readonly infection: {
          /**
           * @description Not implemented yet.
           * @default 0
           */
          readonly kills?: number;
          readonly wins: number;
        };
        readonly kills: number;
        readonly knife: {
          readonly kills: number;
        };
        readonly throw: {
          readonly knife: {
            readonly kills: number;
          };
        };
        readonly wins: number;
      };
      readonly ms: {
        readonly wins: number;
      };
      readonly sc: {
        readonly wins: number;
      };
      readonly sg: {
        readonly kills: number;
        readonly wins: number;
      };
      readonly sw: {
        readonly doubles: {
          readonly insane: {
            readonly kills: number;
          };
          readonly kills: number;
          readonly normal: {
            readonly kills: number;
          };
          readonly wins: number;
        };
        readonly kills: number;
        readonly solo: {
          readonly insane: {
            readonly kills: number;
          };
          readonly kills: number;
          readonly normal: {
            readonly kills: number;
          };
          readonly wins: number;
        };
        readonly wins: number;
      };
      readonly tb: {
        readonly kills: number;
        readonly wins: number;
      };
      readonly wins: number;
    };
    readonly PlayerLeaderboardData: {
      readonly bhWins: number;
      readonly bwBedsBroken: number;
      readonly bwDoublesBedsBroken: number;
      readonly bwDoublesFinalKills: number;
      readonly bwDoublesKills: number;
      readonly bwDoublesWins: number;
      readonly bwFinalKills: number;
      readonly bwKills: number;
      readonly bwSoloBedsBroken: number;
      readonly bwSoloFinalKills: number;
      readonly bwSoloKills: number;
      readonly bwSoloWins: number;
      readonly bwSquadsBedsBroken: number;
      readonly bwSquadsFinalKills: number;
      readonly bwSquadsKills: number;
      readonly bwSquadsWins: number;
      readonly bwTriosBedsBroken: number;
      readonly bwTriosFinalKills: number;
      readonly bwTriosKills: number;
      readonly bwTriosWins: number;
      readonly bwWins: number;
      readonly cqFlagsCaptured: number;
      readonly cqKills: number;
      readonly cqWins: number;
      readonly duelsKills: number;
      readonly duelsWins: number;
      readonly kills: number;
      readonly mmBowKills: number;
      readonly mmClassicKills: number;
      readonly mmClassicWins: number;
      /**
       * @description Not implemented yet.
       * @default 0
       */
      readonly mmInfectionKills?: number;
      readonly mmInfectionWins: number;
      readonly mmKills: number;
      readonly mmKnifeKills: number;
      readonly mmThrowKnifeKills: number;
      readonly mmWins: number;
      readonly msWins: number;
      readonly scWins: number;
      readonly sgKills: number;
      readonly sgWins: number;
      readonly swDoublesInsaneKills: number;
      readonly swDoublesKills: number;
      readonly swDoublesNormalKills: number;
      readonly swDoublesWins: number;
      readonly swKills: number;
      readonly swSoloInsaneKills: number;
      readonly swSoloKills: number;
      readonly swSoloNormalKills: number;
      readonly swSoloWins: number;
      readonly swWins: number;
      readonly tbKills: number;
      readonly tbWins: number;
      readonly wins: number;
    };
    readonly PlayerLeaderboardBulkResponse: readonly {
      readonly player: string;
      readonly data: {
        readonly bhWins: number;
        readonly bwBedsBroken: number;
        readonly bwDoublesBedsBroken: number;
        readonly bwDoublesFinalKills: number;
        readonly bwDoublesKills: number;
        readonly bwDoublesWins: number;
        readonly bwFinalKills: number;
        readonly bwKills: number;
        readonly bwSoloBedsBroken: number;
        readonly bwSoloFinalKills: number;
        readonly bwSoloKills: number;
        readonly bwSoloWins: number;
        readonly bwSquadsBedsBroken: number;
        readonly bwSquadsFinalKills: number;
        readonly bwSquadsKills: number;
        readonly bwSquadsWins: number;
        readonly bwTriosBedsBroken: number;
        readonly bwTriosFinalKills: number;
        readonly bwTriosKills: number;
        readonly bwTriosWins: number;
        readonly bwWins: number;
        readonly cqFlagsCaptured: number;
        readonly cqKills: number;
        readonly cqWins: number;
        readonly duelsKills: number;
        readonly duelsWins: number;
        readonly kills: number;
        readonly mmBowKills: number;
        readonly mmClassicKills: number;
        readonly mmClassicWins: number;
        /**
         * @description Not implemented yet.
         * @default 0
         */
        readonly mmInfectionKills?: number;
        readonly mmInfectionWins: number;
        readonly mmKills: number;
        readonly mmKnifeKills: number;
        readonly mmThrowKnifeKills: number;
        readonly mmWins: number;
        readonly msWins: number;
        readonly scWins: number;
        readonly sgKills: number;
        readonly sgWins: number;
        readonly swDoublesInsaneKills: number;
        readonly swDoublesKills: number;
        readonly swDoublesNormalKills: number;
        readonly swDoublesWins: number;
        readonly swKills: number;
        readonly swSoloInsaneKills: number;
        readonly swSoloKills: number;
        readonly swSoloNormalKills: number;
        readonly swSoloWins: number;
        readonly swWins: number;
        readonly tbKills: number;
        readonly tbWins: number;
        readonly wins: number;
      };
      readonly dataNested: {
        readonly bh: {
          readonly wins: number;
        };
        readonly bw: {
          readonly beds: {
            readonly broken: number;
          };
          readonly doubles: {
            readonly beds: {
              readonly broken: number;
            };
            readonly final: {
              readonly kills: number;
            };
            readonly kills: number;
            readonly wins: number;
          };
          readonly final: {
            readonly kills: number;
          };
          readonly kills: number;
          readonly solo: {
            readonly beds: {
              readonly broken: number;
            };
            readonly final: {
              readonly kills: number;
            };
            readonly kills: number;
            readonly wins: number;
          };
          readonly squads: {
            readonly beds: {
              readonly broken: number;
            };
            readonly final: {
              readonly kills: number;
            };
            readonly kills: number;
            readonly wins: number;
          };
          readonly trios: {
            readonly beds: {
              readonly broken: number;
            };
            readonly final: {
              readonly kills: number;
            };
            readonly kills: number;
            readonly wins: number;
          };
          readonly wins: number;
        };
        readonly cq: {
          readonly flags: {
            readonly captured: number;
          };
          readonly kills: number;
          readonly wins: number;
        };
        readonly duels: {
          readonly kills: number;
          readonly wins: number;
        };
        readonly kills: number;
        readonly mm: {
          readonly bow: {
            readonly kills: number;
          };
          readonly classic: {
            readonly kills: number;
            readonly wins: number;
          };
          readonly infection: {
            /**
             * @description Not implemented yet.
             * @default 0
             */
            readonly kills?: number;
            readonly wins: number;
          };
          readonly kills: number;
          readonly knife: {
            readonly kills: number;
          };
          readonly throw: {
            readonly knife: {
              readonly kills: number;
            };
          };
          readonly wins: number;
        };
        readonly ms: {
          readonly wins: number;
        };
        readonly sc: {
          readonly wins: number;
        };
        readonly sg: {
          readonly kills: number;
          readonly wins: number;
        };
        readonly sw: {
          readonly doubles: {
            readonly insane: {
              readonly kills: number;
            };
            readonly kills: number;
            readonly normal: {
              readonly kills: number;
            };
            readonly wins: number;
          };
          readonly kills: number;
          readonly solo: {
            readonly insane: {
              readonly kills: number;
            };
            readonly kills: number;
            readonly normal: {
              readonly kills: number;
            };
            readonly wins: number;
          };
          readonly wins: number;
        };
        readonly tb: {
          readonly kills: number;
          readonly wins: number;
        };
        readonly wins: number;
      };
      readonly timestamp: number;
    }[];
    readonly PlayerLeaderboardBulkInput: {
      readonly names: readonly string[];
    };
    readonly PlayerLastServerParsed: {
      readonly region: string | null;
      readonly serverName: string | null;
      readonly serverNameLong: string | null;
      readonly serverType: string | null;
      readonly pretty: string;
    };
    readonly PlayerFactionData: {
      readonly tags: number;
      readonly registerDate: string;
      readonly coins: number;
      readonly kills: number;
      readonly bounty: number;
      readonly faction: {
        readonly id: number;
        readonly name: string;
        readonly strength: number;
        readonly allies: readonly string[];
        readonly leader?: unknown;
        readonly officers: readonly unknown[];
        readonly members: readonly unknown[];
      } | null;
    };
    readonly PlayerExtraNested: {
      readonly bh: {
        readonly wins: number;
      };
      readonly bw: {
        readonly kills: number;
        readonly deaths: number;
        readonly solo: {
          readonly kills: number;
          readonly deaths: number;
          readonly beds: {
            readonly broken: number;
          };
          readonly final: {
            readonly kills: number;
          };
          readonly wins: number;
        };
        readonly doubles: {
          readonly kills: number;
          readonly deaths: number;
          readonly beds: {
            readonly broken: number;
          };
          readonly final: {
            readonly kills: number;
          };
          readonly wins: number;
        };
        readonly trios: {
          readonly kills: number;
          readonly deaths: number;
          readonly beds: {
            readonly broken: number;
          };
          readonly final: {
            readonly kills: number;
          };
          readonly wins: number;
        };
        readonly squads: {
          readonly kills: number;
          readonly deaths: number;
          readonly beds: {
            readonly broken: number;
          };
          readonly final: {
            readonly kills: number;
          };
          readonly wins: number;
        };
        readonly beds: {
          readonly broken: number;
        };
        readonly diamonds: {
          readonly collected: number;
        };
        readonly emeralds: {
          readonly collected: number;
        };
        readonly gold: {
          readonly collected: number;
        };
        readonly iron: {
          readonly collected: number;
        };
        readonly final: {
          readonly kills: number;
        };
        readonly streak: number;
        readonly best: {
          readonly streak: number;
        };
        readonly wins: number;
      };
      readonly cq: {
        readonly kills: number;
        readonly deaths: number;
        readonly wins: number;
        readonly flags: {
          readonly collected: number;
          readonly captured: number;
          readonly returned: number;
        };
        readonly diamonds: {
          readonly collected: number;
        };
        readonly emeralds: {
          readonly collected: number;
        };
        readonly gold: {
          readonly collected: number;
        };
        readonly iron: {
          readonly collected: number;
        };
      };
      readonly duels: {
        readonly kills: number;
        readonly deaths: number;
        readonly arrows: {
          readonly shot: number;
        };
        readonly melee: {
          readonly hits: number;
        };
        readonly streak: number;
        readonly best: {
          readonly streak: number;
        };
        readonly wins: number;
        readonly losses: number;
      };
      readonly mm: {
        readonly kills: number;
        readonly deaths: number;
        readonly classic: {
          readonly kills: number;
          readonly deaths: number;
          readonly wins: number;
        };
        readonly infection: {
          /**
           * @description Not implemented yet.
           * @default 0
           */
          readonly kills?: number;
          readonly deaths: number;
          readonly wins: number;
        };
        readonly bow: {
          readonly kills: number;
        };
        readonly knife: {
          readonly kills: number;
        };
        readonly throw: {
          readonly knife: {
            readonly kills: number;
          };
        };
        readonly wins: number;
      };
      readonly ms: {
        readonly successes: number;
        readonly fails: number;
        readonly wins: number;
      };
      readonly sc: {
        readonly wins: number;
        readonly goals: number;
      };
      readonly sg: {
        readonly kills: number;
        readonly deaths: number;
        readonly wins: number;
      };
      readonly sw: {
        readonly coins: number;
        readonly kills: number;
        readonly deaths: number;
        readonly solo: {
          readonly kills: number;
          readonly deaths: number;
          readonly normal: {
            readonly kills: number;
            readonly deaths: number;
          };
          readonly insane: {
            readonly kills: number;
            readonly deaths: number;
          };
          readonly wins: number;
          readonly losses: number;
        };
        readonly doubles: {
          readonly kills: number;
          readonly deaths: number;
          readonly normal: {
            readonly kills: number;
            readonly deaths: number;
          };
          readonly insane: {
            readonly kills: number;
            readonly deaths: number;
          };
          readonly wins: number;
          readonly losses: number;
        };
        readonly blocks: {
          readonly broken: number;
          readonly placed: number;
        };
        readonly arrows: {
          readonly shot: number;
        };
        readonly eggs: {
          readonly thrown: number;
        };
        readonly epearls: {
          readonly thrown: number;
        };
        readonly wins: number;
        readonly losses: number;
      };
      readonly tb: {
        readonly kills: number;
        readonly deaths: number;
        readonly arrows: {
          readonly shot: number;
        };
        readonly melee: {
          readonly hits: number;
        };
        readonly goals: number;
        readonly streak: number;
        readonly best: {
          readonly streak: number;
        };
        readonly wins: number;
        readonly losses: number;
      };
      readonly tr: {
        readonly wins: number;
        readonly losses: number;
        readonly streak: number;
        readonly best: {
          readonly streak: number;
        };
        readonly blocks: {
          readonly dropped: number;
        };
        readonly time: {
          readonly record: number;
        };
      };
      readonly uhc: {
        readonly kills: number;
        readonly deaths: number;
        readonly wins: number;
        readonly iron: {
          readonly mined: number;
        };
        readonly gold: {
          readonly mined: number;
        };
        readonly lapis: {
          readonly mined: number;
        };
        readonly diamond: {
          readonly mined: number;
        };
      };
      readonly weekly: {
        readonly kills: number;
        readonly wins: number;
      };
    };
    readonly PlayerExtra: {
      /** @default 0 */
      readonly bhWins?: number;
      /** @default 0 */
      readonly bwKills?: number;
      /** @default 0 */
      readonly bwDeaths?: number;
      /** @default 0 */
      readonly bwSoloKills?: number;
      /** @default 0 */
      readonly bwSoloDeaths?: number;
      /** @default 0 */
      readonly bwDoublesKills?: number;
      /** @default 0 */
      readonly bwDoublesDeaths?: number;
      /** @default 0 */
      readonly bwTriosKills?: number;
      /** @default 0 */
      readonly bwTriosDeaths?: number;
      /** @default 0 */
      readonly bwSquadsKills?: number;
      /** @default 0 */
      readonly bwSquadsDeaths?: number;
      /** @default 0 */
      readonly bwBedsBroken?: number;
      /** @default 0 */
      readonly bwSoloBedsBroken?: number;
      /** @default 0 */
      readonly bwDoublesBedsBroken?: number;
      /** @default 0 */
      readonly bwTriosBedsBroken?: number;
      /** @default 0 */
      readonly bwSquadsBedsBroken?: number;
      /** @default 0 */
      readonly bwDiamondsCollected?: number;
      /** @default 0 */
      readonly bwEmeraldsCollected?: number;
      /** @default 0 */
      readonly bwGoldCollected?: number;
      /** @default 0 */
      readonly bwIronCollected?: number;
      /** @default 0 */
      readonly bwFinalKills?: number;
      /** @default 0 */
      readonly bwSoloFinalKills?: number;
      /** @default 0 */
      readonly bwDoublesFinalKills?: number;
      /** @default 0 */
      readonly bwTriosFinalKills?: number;
      /** @default 0 */
      readonly bwSquadsFinalKills?: number;
      /** @default 0 */
      readonly bwStreak?: number;
      /** @default 0 */
      readonly bwBestStreak?: number;
      /** @default 0 */
      readonly bwWins?: number;
      /** @default 0 */
      readonly bwSoloWins?: number;
      /** @default 0 */
      readonly bwDoublesWins?: number;
      /** @default 0 */
      readonly bwTriosWins?: number;
      /** @default 0 */
      readonly bwSquadsWins?: number;
      /** @default 0 */
      readonly cqKills?: number;
      /** @default 0 */
      readonly cqDeaths?: number;
      /** @default 0 */
      readonly cqWins?: number;
      /** @default 0 */
      readonly cqFlagsCollected?: number;
      /** @default 0 */
      readonly cqFlagsCaptured?: number;
      /** @default 0 */
      readonly cqFlagsReturned?: number;
      /** @default 0 */
      readonly cqDiamondsCollected?: number;
      /** @default 0 */
      readonly cqEmeraldsCollected?: number;
      /** @default 0 */
      readonly cqGoldCollected?: number;
      /** @default 0 */
      readonly cqIronCollected?: number;
      /** @default 0 */
      readonly duelsKills?: number;
      /** @default 0 */
      readonly duelsDeaths?: number;
      /** @default 0 */
      readonly duelsArrowsShot?: number;
      /** @default 0 */
      readonly duelsMeleeHits?: number;
      /** @default 0 */
      readonly duelsStreak?: number;
      /** @default 0 */
      readonly duelsBestStreak?: number;
      /** @default 0 */
      readonly duelsWins?: number;
      /** @default 0 */
      readonly duelsLosses?: number;
      /** @default 0 */
      readonly mmKills?: number;
      /** @default 0 */
      readonly mmDeaths?: number;
      /** @default 0 */
      readonly mmClassicKills?: number;
      /** @default 0 */
      readonly mmClassicDeaths?: number;
      /**
       * @description Not implemented yet.
       * @default 0
       */
      readonly mmInfectionKills?: number;
      /** @default 0 */
      readonly mmInfectionDeaths?: number;
      /** @default 0 */
      readonly mmBowKills?: number;
      /** @default 0 */
      readonly mmKnifeKills?: number;
      /** @default 0 */
      readonly mmThrowKnifeKills?: number;
      /** @default 0 */
      readonly mmWins?: number;
      /** @default 0 */
      readonly mmClassicWins?: number;
      /** @default 0 */
      readonly mmInfectionWins?: number;
      /** @default 0 */
      readonly msSuccesses?: number;
      /** @default 0 */
      readonly msFails?: number;
      /** @default 0 */
      readonly msWins?: number;
      /** @default 0 */
      readonly scWins?: number;
      /** @default 0 */
      readonly scGoals?: number;
      /** @default 0 */
      readonly sgKills?: number;
      /** @default 0 */
      readonly sgDeaths?: number;
      /** @default 0 */
      readonly sgWins?: number;
      /** @default 0 */
      readonly swCoins?: number;
      /** @default 0 */
      readonly swKills?: number;
      /** @default 0 */
      readonly swDeaths?: number;
      /** @default 0 */
      readonly swSoloKills?: number;
      /** @default 0 */
      readonly swSoloDeaths?: number;
      /** @default 0 */
      readonly swSoloNormalKills?: number;
      /** @default 0 */
      readonly swSoloNormalDeaths?: number;
      /** @default 0 */
      readonly swSoloInsaneKills?: number;
      /** @default 0 */
      readonly swSoloInsaneDeaths?: number;
      /** @default 0 */
      readonly swDoublesKills?: number;
      /** @default 0 */
      readonly swDoublesDeaths?: number;
      /** @default 0 */
      readonly swDoublesNormalKills?: number;
      /** @default 0 */
      readonly swDoublesNormalDeaths?: number;
      /** @default 0 */
      readonly swDoublesInsaneKills?: number;
      /** @default 0 */
      readonly swDoublesInsaneDeaths?: number;
      /** @default 0 */
      readonly swBlocksBroken?: number;
      /** @default 0 */
      readonly swBlocksPlaced?: number;
      /** @default 0 */
      readonly swArrowsShot?: number;
      /** @default 0 */
      readonly swEggsThrown?: number;
      /** @default 0 */
      readonly swEpearlsThrown?: number;
      /** @default 0 */
      readonly swWins?: number;
      /** @default 0 */
      readonly swSoloWins?: number;
      /** @default 0 */
      readonly swDoublesWins?: number;
      /** @default 0 */
      readonly swLosses?: number;
      /** @default 0 */
      readonly swSoloLosses?: number;
      /** @default 0 */
      readonly swDoublesLosses?: number;
      /** @default 0 */
      readonly tbKills?: number;
      /** @default 0 */
      readonly tbDeaths?: number;
      /** @default 0 */
      readonly tbArrowsShot?: number;
      /** @default 0 */
      readonly tbMeleeHits?: number;
      /** @default 0 */
      readonly tbGoals?: number;
      /** @default 0 */
      readonly tbStreak?: number;
      /** @default 0 */
      readonly tbBestStreak?: number;
      /** @default 0 */
      readonly tbWins?: number;
      /** @default 0 */
      readonly tbLosses?: number;
      /** @default 0 */
      readonly trWins?: number;
      /** @default 0 */
      readonly trLosses?: number;
      /** @default 0 */
      readonly trStreak?: number;
      /** @default 0 */
      readonly trBestStreak?: number;
      /** @default 0 */
      readonly trBlocksDropped?: number;
      /** @default 0 */
      readonly trTimeRecord?: number;
      /** @default 0 */
      readonly weeklyKills?: number;
      /** @default 0 */
      readonly weeklyWins?: number;
      /** @default 0 */
      readonly uhcKills?: number;
      /** @default 0 */
      readonly uhcDeaths?: number;
      /** @default 0 */
      readonly uhcWins?: number;
      /** @default 0 */
      readonly uhcIronMined?: number;
      /** @default 0 */
      readonly uhcGoldMined?: number;
      /** @default 0 */
      readonly uhcLapisMined?: number;
      /** @default 0 */
      readonly uhcDiamondMined?: number;
    };
    readonly PlayerDiscordData: {
      readonly claim?: string;
      readonly latest?: string;
    };
    readonly PlayerBulkResponse: readonly {
      readonly xuid: string;
      readonly name: string;
      /** Format: uri */
      readonly avatar: string;
      /** Format: uri */
      readonly skin: string;
      readonly skinData?: {
        readonly skin: boolean;
        /** @enum {string} */
        readonly skinType: 'steve' | 'alex';
        readonly skinVisibility: boolean;
        readonly base64: string;
        readonly raw: string | null;
      };
      readonly skinVisibility: boolean;
      readonly bio: string;
      readonly staff: boolean;
      readonly flags: number;
      readonly banned?: boolean;
      readonly muted?: boolean;
      readonly guild: string | null;
      readonly guildData?:
        | (Partial<unknown> &
            Partial<{
              readonly id: number;
              readonly name: string;
              readonly maxSize: number;
              readonly memberCount: number;
              readonly motd: string;
              readonly position?: number;
              readonly rawTag: string;
              readonly tag: string | null;
              /** @enum {string|null} */
              readonly tagColor:
                | (
                    | '#000000'
                    | '#0000aa'
                    | '#00aa00'
                    | '#00aaaa'
                    | '#aa0000'
                    | '#aa00aa'
                    | '#ffaa00'
                    | '#aaaaaa'
                    | '#555555'
                    | '#5555ff'
                    | '#55ff55'
                    | '#55ffff'
                    | '#ff5555'
                    | '#ff55ff'
                    | '#ffff55'
                    | '#ffffff'
                    | '#ddd605'
                  )
                | null;
              readonly xp: number;
              readonly xpToNextLevel: number;
              readonly level: number;
              readonly leader?: unknown;
              readonly officers: readonly unknown[];
              readonly members: readonly unknown[];
            }>)
        | null;
      readonly level: number;
      readonly levelColors: readonly (
        | '#000000'
        | '#0000aa'
        | '#00aa00'
        | '#00aaaa'
        | '#aa0000'
        | '#aa00aa'
        | '#ffaa00'
        | '#aaaaaa'
        | '#555555'
        | '#5555ff'
        | '#55ff55'
        | '#55ffff'
        | '#ff5555'
        | '#ff55ff'
        | '#ffff55'
        | '#ffffff'
        | '#ddd605'
      )[];
      /** @enum {string} */
      readonly levelFormat: '§k' | '§l' | '§o' | '§r';
      readonly formattedLevel: string;
      readonly online?: boolean;
      readonly credits: number;
      readonly statusCredits: number;
      readonly xp: number;
      readonly xpToNextLevel: number;
      readonly ranks: readonly (
        | 'Owner'
        | 'Director'
        | 'Advisor'
        | 'Community'
        | 'Admin'
        | 'Dev'
        | 'Supervisor'
        | 'Discord'
        | 'Mod'
        | 'Crew'
        | 'Trainee'
        | 'Builder'
        | 'Designer'
        | 'Game Designer'
        | 'Media'
        | 'Partner'
        | 'Titan'
        | 'Legend'
        | 'Emerald'
        | 'Ultra'
        | 'Youtube'
        | 'Tester'
      )[];
      readonly rankColors: readonly string[];
      /** @enum {string|null} */
      readonly tier: ('Silver' | 'Gold' | 'Guardian' | 'Eagle' | 'Elite') | null;
      readonly tierColor: string | null;
      readonly kills?: number;
      readonly deaths?: number;
      readonly kdr?: number;
      readonly wins?: number;
      readonly losses?: number;
      readonly wlr?: number;
      readonly firstJoin: string | null;
      readonly firstJoined: number;
      readonly lastJoin: string | null;
      readonly lastJoined: number;
      readonly lastSeen: string | null;
      readonly lastServer: string;
      readonly lastServerParsed: {
        readonly region: string | null;
        readonly serverName: string | null;
        readonly serverNameLong: string | null;
        readonly serverType: string | null;
        readonly pretty: string;
      };
      /** @description Deprecated, use `discordId` instead */
      readonly discordData: {readonly [key: string]: unknown};
      readonly discordId: string | null;
      readonly extra?: {
        /** @default 0 */
        readonly bhWins?: number;
        /** @default 0 */
        readonly bwKills?: number;
        /** @default 0 */
        readonly bwDeaths?: number;
        /** @default 0 */
        readonly bwSoloKills?: number;
        /** @default 0 */
        readonly bwSoloDeaths?: number;
        /** @default 0 */
        readonly bwDoublesKills?: number;
        /** @default 0 */
        readonly bwDoublesDeaths?: number;
        /** @default 0 */
        readonly bwTriosKills?: number;
        /** @default 0 */
        readonly bwTriosDeaths?: number;
        /** @default 0 */
        readonly bwSquadsKills?: number;
        /** @default 0 */
        readonly bwSquadsDeaths?: number;
        /** @default 0 */
        readonly bwBedsBroken?: number;
        /** @default 0 */
        readonly bwSoloBedsBroken?: number;
        /** @default 0 */
        readonly bwDoublesBedsBroken?: number;
        /** @default 0 */
        readonly bwTriosBedsBroken?: number;
        /** @default 0 */
        readonly bwSquadsBedsBroken?: number;
        /** @default 0 */
        readonly bwDiamondsCollected?: number;
        /** @default 0 */
        readonly bwEmeraldsCollected?: number;
        /** @default 0 */
        readonly bwGoldCollected?: number;
        /** @default 0 */
        readonly bwIronCollected?: number;
        /** @default 0 */
        readonly bwFinalKills?: number;
        /** @default 0 */
        readonly bwSoloFinalKills?: number;
        /** @default 0 */
        readonly bwDoublesFinalKills?: number;
        /** @default 0 */
        readonly bwTriosFinalKills?: number;
        /** @default 0 */
        readonly bwSquadsFinalKills?: number;
        /** @default 0 */
        readonly bwStreak?: number;
        /** @default 0 */
        readonly bwBestStreak?: number;
        /** @default 0 */
        readonly bwWins?: number;
        /** @default 0 */
        readonly bwSoloWins?: number;
        /** @default 0 */
        readonly bwDoublesWins?: number;
        /** @default 0 */
        readonly bwTriosWins?: number;
        /** @default 0 */
        readonly bwSquadsWins?: number;
        /** @default 0 */
        readonly cqKills?: number;
        /** @default 0 */
        readonly cqDeaths?: number;
        /** @default 0 */
        readonly cqWins?: number;
        /** @default 0 */
        readonly cqFlagsCollected?: number;
        /** @default 0 */
        readonly cqFlagsCaptured?: number;
        /** @default 0 */
        readonly cqFlagsReturned?: number;
        /** @default 0 */
        readonly cqDiamondsCollected?: number;
        /** @default 0 */
        readonly cqEmeraldsCollected?: number;
        /** @default 0 */
        readonly cqGoldCollected?: number;
        /** @default 0 */
        readonly cqIronCollected?: number;
        /** @default 0 */
        readonly duelsKills?: number;
        /** @default 0 */
        readonly duelsDeaths?: number;
        /** @default 0 */
        readonly duelsArrowsShot?: number;
        /** @default 0 */
        readonly duelsMeleeHits?: number;
        /** @default 0 */
        readonly duelsStreak?: number;
        /** @default 0 */
        readonly duelsBestStreak?: number;
        /** @default 0 */
        readonly duelsWins?: number;
        /** @default 0 */
        readonly duelsLosses?: number;
        /** @default 0 */
        readonly mmKills?: number;
        /** @default 0 */
        readonly mmDeaths?: number;
        /** @default 0 */
        readonly mmClassicKills?: number;
        /** @default 0 */
        readonly mmClassicDeaths?: number;
        /**
         * @description Not implemented yet.
         * @default 0
         */
        readonly mmInfectionKills?: number;
        /** @default 0 */
        readonly mmInfectionDeaths?: number;
        /** @default 0 */
        readonly mmBowKills?: number;
        /** @default 0 */
        readonly mmKnifeKills?: number;
        /** @default 0 */
        readonly mmThrowKnifeKills?: number;
        /** @default 0 */
        readonly mmWins?: number;
        /** @default 0 */
        readonly mmClassicWins?: number;
        /** @default 0 */
        readonly mmInfectionWins?: number;
        /** @default 0 */
        readonly msSuccesses?: number;
        /** @default 0 */
        readonly msFails?: number;
        /** @default 0 */
        readonly msWins?: number;
        /** @default 0 */
        readonly scWins?: number;
        /** @default 0 */
        readonly scGoals?: number;
        /** @default 0 */
        readonly sgKills?: number;
        /** @default 0 */
        readonly sgDeaths?: number;
        /** @default 0 */
        readonly sgWins?: number;
        /** @default 0 */
        readonly swCoins?: number;
        /** @default 0 */
        readonly swKills?: number;
        /** @default 0 */
        readonly swDeaths?: number;
        /** @default 0 */
        readonly swSoloKills?: number;
        /** @default 0 */
        readonly swSoloDeaths?: number;
        /** @default 0 */
        readonly swSoloNormalKills?: number;
        /** @default 0 */
        readonly swSoloNormalDeaths?: number;
        /** @default 0 */
        readonly swSoloInsaneKills?: number;
        /** @default 0 */
        readonly swSoloInsaneDeaths?: number;
        /** @default 0 */
        readonly swDoublesKills?: number;
        /** @default 0 */
        readonly swDoublesDeaths?: number;
        /** @default 0 */
        readonly swDoublesNormalKills?: number;
        /** @default 0 */
        readonly swDoublesNormalDeaths?: number;
        /** @default 0 */
        readonly swDoublesInsaneKills?: number;
        /** @default 0 */
        readonly swDoublesInsaneDeaths?: number;
        /** @default 0 */
        readonly swBlocksBroken?: number;
        /** @default 0 */
        readonly swBlocksPlaced?: number;
        /** @default 0 */
        readonly swArrowsShot?: number;
        /** @default 0 */
        readonly swEggsThrown?: number;
        /** @default 0 */
        readonly swEpearlsThrown?: number;
        /** @default 0 */
        readonly swWins?: number;
        /** @default 0 */
        readonly swSoloWins?: number;
        /** @default 0 */
        readonly swDoublesWins?: number;
        /** @default 0 */
        readonly swLosses?: number;
        /** @default 0 */
        readonly swSoloLosses?: number;
        /** @default 0 */
        readonly swDoublesLosses?: number;
        /** @default 0 */
        readonly tbKills?: number;
        /** @default 0 */
        readonly tbDeaths?: number;
        /** @default 0 */
        readonly tbArrowsShot?: number;
        /** @default 0 */
        readonly tbMeleeHits?: number;
        /** @default 0 */
        readonly tbGoals?: number;
        /** @default 0 */
        readonly tbStreak?: number;
        /** @default 0 */
        readonly tbBestStreak?: number;
        /** @default 0 */
        readonly tbWins?: number;
        /** @default 0 */
        readonly tbLosses?: number;
        /** @default 0 */
        readonly trWins?: number;
        /** @default 0 */
        readonly trLosses?: number;
        /** @default 0 */
        readonly trStreak?: number;
        /** @default 0 */
        readonly trBestStreak?: number;
        /** @default 0 */
        readonly trBlocksDropped?: number;
        /** @default 0 */
        readonly trTimeRecord?: number;
        /** @default 0 */
        readonly weeklyKills?: number;
        /** @default 0 */
        readonly weeklyWins?: number;
        /** @default 0 */
        readonly uhcKills?: number;
        /** @default 0 */
        readonly uhcDeaths?: number;
        /** @default 0 */
        readonly uhcWins?: number;
        /** @default 0 */
        readonly uhcIronMined?: number;
        /** @default 0 */
        readonly uhcGoldMined?: number;
        /** @default 0 */
        readonly uhcLapisMined?: number;
        /** @default 0 */
        readonly uhcDiamondMined?: number;
      };
      readonly extraNested?: {
        readonly bh: {
          readonly wins: number;
        };
        readonly bw: {
          readonly kills: number;
          readonly deaths: number;
          readonly solo: {
            readonly kills: number;
            readonly deaths: number;
            readonly beds: {
              readonly broken: number;
            };
            readonly final: {
              readonly kills: number;
            };
            readonly wins: number;
          };
          readonly doubles: {
            readonly kills: number;
            readonly deaths: number;
            readonly beds: {
              readonly broken: number;
            };
            readonly final: {
              readonly kills: number;
            };
            readonly wins: number;
          };
          readonly trios: {
            readonly kills: number;
            readonly deaths: number;
            readonly beds: {
              readonly broken: number;
            };
            readonly final: {
              readonly kills: number;
            };
            readonly wins: number;
          };
          readonly squads: {
            readonly kills: number;
            readonly deaths: number;
            readonly beds: {
              readonly broken: number;
            };
            readonly final: {
              readonly kills: number;
            };
            readonly wins: number;
          };
          readonly beds: {
            readonly broken: number;
          };
          readonly diamonds: {
            readonly collected: number;
          };
          readonly emeralds: {
            readonly collected: number;
          };
          readonly gold: {
            readonly collected: number;
          };
          readonly iron: {
            readonly collected: number;
          };
          readonly final: {
            readonly kills: number;
          };
          readonly streak: number;
          readonly best: {
            readonly streak: number;
          };
          readonly wins: number;
        };
        readonly cq: {
          readonly kills: number;
          readonly deaths: number;
          readonly wins: number;
          readonly flags: {
            readonly collected: number;
            readonly captured: number;
            readonly returned: number;
          };
          readonly diamonds: {
            readonly collected: number;
          };
          readonly emeralds: {
            readonly collected: number;
          };
          readonly gold: {
            readonly collected: number;
          };
          readonly iron: {
            readonly collected: number;
          };
        };
        readonly duels: {
          readonly kills: number;
          readonly deaths: number;
          readonly arrows: {
            readonly shot: number;
          };
          readonly melee: {
            readonly hits: number;
          };
          readonly streak: number;
          readonly best: {
            readonly streak: number;
          };
          readonly wins: number;
          readonly losses: number;
        };
        readonly mm: {
          readonly kills: number;
          readonly deaths: number;
          readonly classic: {
            readonly kills: number;
            readonly deaths: number;
            readonly wins: number;
          };
          readonly infection: {
            /**
             * @description Not implemented yet.
             * @default 0
             */
            readonly kills?: number;
            readonly deaths: number;
            readonly wins: number;
          };
          readonly bow: {
            readonly kills: number;
          };
          readonly knife: {
            readonly kills: number;
          };
          readonly throw: {
            readonly knife: {
              readonly kills: number;
            };
          };
          readonly wins: number;
        };
        readonly ms: {
          readonly successes: number;
          readonly fails: number;
          readonly wins: number;
        };
        readonly sc: {
          readonly wins: number;
          readonly goals: number;
        };
        readonly sg: {
          readonly kills: number;
          readonly deaths: number;
          readonly wins: number;
        };
        readonly sw: {
          readonly coins: number;
          readonly kills: number;
          readonly deaths: number;
          readonly solo: {
            readonly kills: number;
            readonly deaths: number;
            readonly normal: {
              readonly kills: number;
              readonly deaths: number;
            };
            readonly insane: {
              readonly kills: number;
              readonly deaths: number;
            };
            readonly wins: number;
            readonly losses: number;
          };
          readonly doubles: {
            readonly kills: number;
            readonly deaths: number;
            readonly normal: {
              readonly kills: number;
              readonly deaths: number;
            };
            readonly insane: {
              readonly kills: number;
              readonly deaths: number;
            };
            readonly wins: number;
            readonly losses: number;
          };
          readonly blocks: {
            readonly broken: number;
            readonly placed: number;
          };
          readonly arrows: {
            readonly shot: number;
          };
          readonly eggs: {
            readonly thrown: number;
          };
          readonly epearls: {
            readonly thrown: number;
          };
          readonly wins: number;
          readonly losses: number;
        };
        readonly tb: {
          readonly kills: number;
          readonly deaths: number;
          readonly arrows: {
            readonly shot: number;
          };
          readonly melee: {
            readonly hits: number;
          };
          readonly goals: number;
          readonly streak: number;
          readonly best: {
            readonly streak: number;
          };
          readonly wins: number;
          readonly losses: number;
        };
        readonly tr: {
          readonly wins: number;
          readonly losses: number;
          readonly streak: number;
          readonly best: {
            readonly streak: number;
          };
          readonly blocks: {
            readonly dropped: number;
          };
          readonly time: {
            readonly record: number;
          };
        };
        readonly uhc: {
          readonly kills: number;
          readonly deaths: number;
          readonly wins: number;
          readonly iron: {
            readonly mined: number;
          };
          readonly gold: {
            readonly mined: number;
          };
          readonly lapis: {
            readonly mined: number;
          };
          readonly diamond: {
            readonly mined: number;
          };
        };
        readonly weekly: {
          readonly kills: number;
          readonly wins: number;
        };
      };
      readonly factionData?: {
        readonly tags: number;
        readonly registerDate: string;
        readonly coins: number;
        readonly kills: number;
        readonly bounty: number;
        readonly faction: {
          readonly id: number;
          readonly name: string;
          readonly strength: number;
          readonly allies: readonly string[];
          readonly leader?: unknown;
          readonly officers: readonly unknown[];
          readonly members: readonly unknown[];
        } | null;
      } | null;
      /** @default false */
      readonly leaderboard?: boolean;
      readonly punishmentsNew?: readonly {
        readonly id: string;
        /** @description The punishment `reasonName` and `reasonCategory` joined together. */
        readonly reason: string;
        /** @enum {string} */
        readonly reasonName:
          | 'Abusing Report System'
          | 'Advertisement Build'
          | 'Advertising Hack Clients'
          | 'Advertising Servers'
          | 'Advertising Websites & Services'
          | 'Anticheat Automatic Detection'
          | 'Auto Clicker'
          | 'Bug Exploiting'
          | 'Chargeback'
          | 'Credit Farming'
          | 'Cross Teaming'
          | 'Disrespect'
          | 'Explicit Build'
          | 'Fly'
          | 'Inappropriate Conduct'
          | 'Inappropriate Faction/Guild Name'
          | 'Inappropriate Language'
          | 'Inappropriate Nickname/Pet Name'
          | 'Inappropriate Skin'
          | 'Inappropriate Username'
          | 'Jump'
          | 'Key Mapper'
          | 'Kill Farming'
          | 'KillAura'
          | 'Night Vision'
          | 'Obstruction of Justice'
          | 'Other'
          | 'Player Tracer'
          | 'Punishment Evading'
          | 'Spamming'
          | 'Speed'
          | 'Staff Disrespect'
          | 'Team Trolling/Killing'
          | 'Teaming in Solo Mode'
          | 'Teleport Trapping'
          | 'Threat to Community'
          | 'Violent Build'
          | 'Xray';
        /** @enum {string} */
        readonly reasonCategory:
          | 'Abusive Communication'
          | 'Advertising'
          | 'Enforcement'
          | 'Factions & Guilds'
          | 'Hacking'
          | 'Inappropriate Behaviour'
          | 'Inappropriate Build'
          | 'Other'
          | 'Prohibited Addon/Mod'
          | 'Teaming';
        /** @enum {string} */
        readonly type: 'BAN' | 'MUTE';
        /** @description If true, the punishment does not expire. */
        readonly permanent: boolean;
        /** @description For migration punishments, this value is 0. */
        readonly issuedAt: number;
        /** @description If `permanent` is true, this value is -1. */
        readonly validUntil: number;
        /** @description Whether this punishment is currently active. */
        readonly active: boolean;
        /** @description The XUIDs affected by this punishment. */
        readonly affectedXuids: readonly string[];
        /** @description The corresponding player names to `affectedXuids`. */
        readonly affectedPlayers: readonly string[];
        readonly alt: boolean;
      }[];
      /** @enum {number} */
      readonly voteStatus?: 0 | 1 | 2;
      readonly winsData?: {
        readonly BH: number;
        readonly BW: number;
        readonly CQ: number;
        readonly Duels: number;
        readonly MM: number;
        readonly MS: number;
        readonly SC: number;
        readonly SG: number;
        readonly SW: number;
        readonly TB: number;
        readonly TR: number;
        readonly UHC: number;
        /**
         * @description Deprecated
         * @default 0
         */
        readonly Weekly?: number;
      };
      /** @description Deprecated, use `punishmentsNew` instead */
      readonly punishments: readonly unknown[];
      /** @description Deprecated, use `punishmentsNew` instead */
      readonly warnings: readonly unknown[];
    }[];
    readonly PlayerBulkInput: {
      /** @default false */
      readonly expand?: boolean;
      /** @default true */
      readonly withFactionData?: boolean;
      /** @default false */
      readonly withGuildData?: boolean;
      /** @default true */
      readonly withOnline?: boolean;
      /** @default true */
      readonly withPunishments?: boolean;
      /** @default false */
      readonly withSkinData?: boolean;
      /** @default true */
      readonly withStats?: boolean;
      /** @default true */
      readonly withVoteStatus?: boolean;
      readonly names: readonly string[];
    };
    readonly LeaderboardResponseXP: {
      readonly player: string;
      readonly xp: number;
      readonly xpToNextLevel: number;
      readonly level: number;
    };
    readonly LeaderboardResponseWLR: {
      readonly player: string;
      readonly wlr: number;
    };
    readonly LeaderboardResponseWins: {
      readonly player: string;
      readonly wins: number;
    };
    readonly LeaderboardResponseVoters: {
      readonly nickname: string;
      readonly votes: number;
    };
    readonly LeaderboardResponseParkour: {
      readonly name: string;
      readonly time: number;
    };
    readonly LeaderboardResponseKills: {
      readonly player: string;
      readonly kills: number;
    };
    readonly LeaderboardResponseKDR: {
      readonly player: string;
      readonly kdr: number;
    };
    readonly LeaderboardResponseGuilds: {
      readonly name: string;
      readonly leader: string;
      readonly xp: number;
      readonly xpToNextLevel: number;
      readonly level: number;
    };
    readonly LeaderboardResponseGame: {
      readonly player: string;
      readonly value: number;
    };
    readonly LeaderboardResponseFactions: Partial<{
      readonly name: string;
      readonly leader: string;
      readonly strength: number;
    }> &
      Partial<{
        readonly player: string;
        readonly kills: number;
        readonly coins: number;
        readonly bounty: number;
        readonly streak: number;
        readonly bestStreak: number;
        readonly xp: number;
        readonly xpToNextLevel: number;
        readonly level: number;
      }>;
    readonly LeaderboardResponseCredits: {
      readonly player: string;
      readonly credits: number;
    };
    readonly LeaderboardResponse: Partial<
      readonly {
        readonly player: string;
        readonly credits: number;
      }[]
    > &
      Partial<
        readonly (Partial<{
          readonly name: string;
          readonly leader: string;
          readonly strength: number;
        }> &
          Partial<{
            readonly player: string;
            readonly kills: number;
            readonly coins: number;
            readonly bounty: number;
            readonly streak: number;
            readonly bestStreak: number;
            readonly xp: number;
            readonly xpToNextLevel: number;
            readonly level: number;
          }>)[]
      > &
      Partial<
        readonly {
          readonly player: string;
          readonly value: number;
        }[]
      > &
      Partial<
        readonly {
          readonly name: string;
          readonly leader: string;
          readonly xp: number;
          readonly xpToNextLevel: number;
          readonly level: number;
        }[]
      > &
      Partial<
        readonly {
          readonly player: string;
          readonly kdr: number;
        }[]
      > &
      Partial<
        readonly {
          readonly player: string;
          readonly kills: number;
        }[]
      > &
      Partial<
        readonly {
          readonly name: string;
          readonly time: number;
        }[]
      > &
      Partial<
        readonly {
          readonly nickname: string;
          readonly votes: number;
        }[]
      > &
      Partial<
        readonly {
          readonly player: string;
          readonly wins: number;
        }[]
      > &
      Partial<
        readonly {
          readonly player: string;
          readonly wlr: number;
        }[]
      > &
      Partial<
        readonly {
          readonly player: string;
          readonly xp: number;
          readonly xpToNextLevel: number;
          readonly level: number;
        }[]
      >;
    readonly LeaderboardQuery: {
      /** @default 100 */
      readonly limit?: number;
      /** @enum {string} */
      readonly type:
        | 'credits'
        | 'factions'
        | 'game'
        | 'guilds'
        | 'kdr'
        | 'kills'
        | 'parkour'
        | 'voters'
        | 'wins'
        | 'wlr'
        | 'xp';
      /** @enum {string} */
      readonly column?:
        | 'bh_wins'
        | 'bw_beds_broken'
        | 'bw_doubles_beds_broken'
        | 'bw_doubles_final_kills'
        | 'bw_doubles_kills'
        | 'bw_doubles_wins'
        | 'bw_final_kills'
        | 'bw_kills'
        | 'bw_solo_beds_broken'
        | 'bw_solo_final_kills'
        | 'bw_solo_kills'
        | 'bw_solo_wins'
        | 'bw_squads_beds_broken'
        | 'bw_squads_final_kills'
        | 'bw_squads_kills'
        | 'bw_squads_wins'
        | 'bw_trios_beds_broken'
        | 'bw_trios_final_kills'
        | 'bw_trios_kills'
        | 'bw_trios_wins'
        | 'bw_wins'
        | 'cq_flags_captured'
        | 'cq_kills'
        | 'cq_wins'
        | 'duels_kills'
        | 'duels_wins'
        | 'kills'
        | 'mm_bow_kills'
        | 'mm_classic_kills'
        | 'mm_classic_wins'
        | 'mm_infection_wins'
        | 'mm_kills'
        | 'mm_knife_kills'
        | 'mm_throw_knife_kills'
        | 'mm_wins'
        | 'ms_wins'
        | 'sc_wins'
        | 'sg_kills'
        | 'sg_wins'
        | 'sw_doubles_insane_kills'
        | 'sw_doubles_kills'
        | 'sw_doubles_normal_kills'
        | 'sw_doubles_wins'
        | 'sw_kills'
        | 'sw_solo_insane_kills'
        | 'sw_solo_kills'
        | 'sw_solo_normal_kills'
        | 'sw_solo_wins'
        | 'sw_wins'
        | 'tb_kills'
        | 'tb_wins'
        | 'wins';
      /** @enum {string} */
      readonly scope?: 'bestStreak' | 'kills' | 'streak';
    };
    readonly LeaderboardBulkResponse: readonly unknown[];
    readonly LeaderboardBulkInput: readonly {
      /** @default 100 */
      readonly limit?: number;
      /** @enum {string} */
      readonly type:
        | 'credits'
        | 'factions'
        | 'game'
        | 'guilds'
        | 'kdr'
        | 'kills'
        | 'parkour'
        | 'voters'
        | 'wins'
        | 'wlr'
        | 'xp';
      /** @enum {string} */
      readonly column?:
        | 'bh_wins'
        | 'bw_beds_broken'
        | 'bw_doubles_beds_broken'
        | 'bw_doubles_final_kills'
        | 'bw_doubles_kills'
        | 'bw_doubles_wins'
        | 'bw_final_kills'
        | 'bw_kills'
        | 'bw_solo_beds_broken'
        | 'bw_solo_final_kills'
        | 'bw_solo_kills'
        | 'bw_solo_wins'
        | 'bw_squads_beds_broken'
        | 'bw_squads_final_kills'
        | 'bw_squads_kills'
        | 'bw_squads_wins'
        | 'bw_trios_beds_broken'
        | 'bw_trios_final_kills'
        | 'bw_trios_kills'
        | 'bw_trios_wins'
        | 'bw_wins'
        | 'cq_flags_captured'
        | 'cq_kills'
        | 'cq_wins'
        | 'duels_kills'
        | 'duels_wins'
        | 'kills'
        | 'mm_bow_kills'
        | 'mm_classic_kills'
        | 'mm_classic_wins'
        | 'mm_infection_wins'
        | 'mm_kills'
        | 'mm_knife_kills'
        | 'mm_throw_knife_kills'
        | 'mm_wins'
        | 'ms_wins'
        | 'sc_wins'
        | 'sg_kills'
        | 'sg_wins'
        | 'sw_doubles_insane_kills'
        | 'sw_doubles_kills'
        | 'sw_doubles_normal_kills'
        | 'sw_doubles_wins'
        | 'sw_kills'
        | 'sw_solo_insane_kills'
        | 'sw_solo_kills'
        | 'sw_solo_normal_kills'
        | 'sw_solo_wins'
        | 'sw_wins'
        | 'tb_kills'
        | 'tb_wins'
        | 'wins';
      /** @enum {string} */
      readonly scope?: 'bestStreak' | 'kills' | 'streak';
    }[];
    readonly GuildResponse: {
      readonly id: number;
      readonly name: string;
      readonly maxSize: number;
      readonly memberCount: number;
      readonly motd: string;
      readonly position?: number;
      readonly rawTag: string;
      readonly tag: string | null;
      /** @enum {string|null} */
      readonly tagColor:
        | (
            | '#000000'
            | '#0000aa'
            | '#00aa00'
            | '#00aaaa'
            | '#aa0000'
            | '#aa00aa'
            | '#ffaa00'
            | '#aaaaaa'
            | '#555555'
            | '#5555ff'
            | '#55ff55'
            | '#55ffff'
            | '#ff5555'
            | '#ff55ff'
            | '#ffff55'
            | '#ffffff'
            | '#ddd605'
          )
        | null;
      readonly xp: number;
      readonly xpToNextLevel: number;
      readonly level: number;
      readonly leader?: unknown;
      readonly officers: readonly unknown[];
      readonly members: readonly unknown[];
    };
    readonly GuildQuery: {
      /** @default false */
      readonly expand?: boolean;
      /** @default true */
      readonly withOnline?: boolean;
      /** @default false */
      readonly withPunishments?: boolean;
      /** @default false */
      readonly withSkinData?: boolean;
      /** @default false */
      readonly withStats?: boolean;
      /** @default false */
      readonly withVoteStatus?: boolean;
    };
    readonly GuildBulkResponse: readonly {
      readonly id: number;
      readonly name: string;
      readonly maxSize: number;
      readonly memberCount: number;
      readonly motd: string;
      readonly position?: number;
      readonly rawTag: string;
      readonly tag: string | null;
      /** @enum {string|null} */
      readonly tagColor:
        | (
            | '#000000'
            | '#0000aa'
            | '#00aa00'
            | '#00aaaa'
            | '#aa0000'
            | '#aa00aa'
            | '#ffaa00'
            | '#aaaaaa'
            | '#555555'
            | '#5555ff'
            | '#55ff55'
            | '#55ffff'
            | '#ff5555'
            | '#ff55ff'
            | '#ffff55'
            | '#ffffff'
            | '#ddd605'
          )
        | null;
      readonly xp: number;
      readonly xpToNextLevel: number;
      readonly level: number;
      readonly leader?: unknown;
      readonly officers: readonly unknown[];
      readonly members: readonly unknown[];
    }[];
    readonly GuildBulkInput: {
      /** @default false */
      readonly expand?: boolean;
      /** @default true */
      readonly withOnline?: boolean;
      /** @default false */
      readonly withPunishments?: boolean;
      /** @default false */
      readonly withSkinData?: boolean;
      /** @default false */
      readonly withStats?: boolean;
      /** @default false */
      readonly withVoteStatus?: boolean;
      readonly names: readonly string[];
    };
    readonly FactionResponse: {
      readonly id: number;
      readonly name: string;
      readonly strength: number;
      readonly allies: readonly string[];
      readonly leader?: unknown;
      readonly officers: readonly unknown[];
      readonly members: readonly unknown[];
    };
    readonly FactionBulkResponse: readonly {
      readonly id: number;
      readonly name: string;
      readonly strength: number;
      readonly allies: readonly string[];
      readonly leader?: unknown;
      readonly officers: readonly unknown[];
      readonly members: readonly unknown[];
    }[];
    readonly DiscordCountResponse: {
      readonly members: number;
    };
    readonly AnnouncementsResponseTitle: {
      readonly title: string;
      readonly subtitle: string;
      readonly fadeIn: number;
      readonly duration: number;
      readonly fadeOut: number;
    };
    readonly AnnouncementsResponseMessage: string;
    readonly AnnouncementsResponseDiscord: {
      readonly content: string | null;
      /** Format: date-time */
      readonly timestamp: string;
      readonly author: {
        readonly id: string;
        readonly username: string;
        readonly discriminator: string;
        readonly avatar: string | null;
        readonly public_flags: number;
      };
      readonly attachments: readonly {
        readonly id: string;
        readonly filename: string;
        readonly description?: string;
        readonly content_type?: string;
        readonly size: number;
        readonly url: string;
        readonly proxy_url: string;
        readonly height?: number;
        readonly width?: number;
        readonly ephemeral?: boolean;
      }[];
    };
    readonly AnnouncementsResponseBoard: string;
    readonly AnnouncementsResponse: Partial<readonly string[]> &
      Partial<readonly string[]> &
      Partial<
        readonly {
          readonly title: string;
          readonly subtitle: string;
          readonly fadeIn: number;
          readonly duration: number;
          readonly fadeOut: number;
        }[]
      > &
      Partial<
        readonly {
          readonly content: string | null;
          /** Format: date-time */
          readonly timestamp: string;
          readonly author: {
            readonly id: string;
            readonly username: string;
            readonly discriminator: string;
            readonly avatar: string | null;
            readonly public_flags: number;
          };
          readonly attachments: readonly {
            readonly id: string;
            readonly filename: string;
            readonly description?: string;
            readonly content_type?: string;
            readonly size: number;
            readonly url: string;
            readonly proxy_url: string;
            readonly height?: number;
            readonly width?: number;
            readonly ephemeral?: boolean;
          }[];
        }[]
      >;
    readonly AnnouncementsQuery: {
      /** @default 100 */
      readonly limit?: number;
      /** @enum {string} */
      readonly type: 'board' | 'message' | 'title' | 'discord';
    };
  };
}

export interface operations {
  readonly 'Get Announcements': {
    readonly parameters: {
      readonly query: {
        readonly limit?: number;
        readonly type: 'board' | 'message' | 'title' | 'discord';
      };
    };
    readonly responses: {
      /** Default Response */
      readonly 200: {
        readonly content: {
          readonly 'application/json': components['schemas']['AnnouncementsResponse'];
        };
      };
    };
  };
  readonly 'Get Discord Member Count': {
    readonly responses: {
      /** Default Response */
      readonly 200: {
        readonly content: {
          readonly 'application/json': components['schemas']['DiscordCountResponse'];
        };
      };
    };
  };
  readonly 'Get Faction': {
    readonly parameters: {
      readonly query: {
        readonly expand?: boolean;
        readonly withOnline?: boolean;
        readonly withPunishments?: boolean;
        readonly withSkinData?: boolean;
        readonly withStats?: boolean;
        readonly withVoteStatus?: boolean;
      };
    };
    readonly responses: {
      /** Default Response */
      readonly 200: {
        readonly content: {
          readonly 'application/json': components['schemas']['FactionResponse'];
        };
      };
    };
  };
  readonly 'Get Factions': {
    readonly parameters: {
      readonly query: {
        readonly expand?: boolean;
        readonly withStats?: boolean;
        readonly first?: number;
        readonly after?: string;
        readonly last?: number;
        readonly before?: string;
      };
    };
    readonly responses: {
      /** Default Response */
      readonly 200: {
        readonly content: {
          readonly 'application/json': components['schemas']['RelayPaginationResponse'];
        };
      };
    };
  };
  readonly 'Bulk Get Factions': {
    readonly responses: {
      /** Default Response */
      readonly 200: {
        readonly content: {
          readonly 'application/json': components['schemas']['FactionBulkResponse'];
        };
      };
    };
    readonly requestBody: {
      readonly content: {
        readonly 'application/json': components['schemas']['GuildBulkInput'];
      };
    };
  };
  readonly 'Get Guild': {
    readonly parameters: {
      readonly query: {
        readonly expand?: boolean;
        readonly withOnline?: boolean;
        readonly withPunishments?: boolean;
        readonly withSkinData?: boolean;
        readonly withStats?: boolean;
        readonly withVoteStatus?: boolean;
      };
    };
    readonly responses: {
      /** Default Response */
      readonly 200: {
        readonly content: {
          readonly 'application/json': components['schemas']['GuildResponse'];
        };
      };
    };
  };
  readonly 'Get Guilds': {
    readonly parameters: {
      readonly query: {
        readonly expand?: boolean;
        readonly withStats?: boolean;
        readonly first?: number;
        readonly after?: string;
        readonly last?: number;
        readonly before?: string;
      };
    };
    readonly responses: {
      /** Default Response */
      readonly 200: {
        readonly content: {
          readonly 'application/json': components['schemas']['RelayPaginationResponse'];
        };
      };
    };
  };
  readonly 'Bulk Get Guilds': {
    readonly responses: {
      /** Default Response */
      readonly 200: {
        readonly content: {
          readonly 'application/json': components['schemas']['GuildBulkResponse'];
        };
      };
    };
    readonly requestBody: {
      readonly content: {
        readonly 'application/json': components['schemas']['GuildBulkInput'];
      };
    };
  };
  readonly 'Get Leaderboard': {
    readonly parameters: {
      readonly query: {
        readonly limit?: number;
        readonly type:
          | 'credits'
          | 'factions'
          | 'game'
          | 'guilds'
          | 'kdr'
          | 'kills'
          | 'parkour'
          | 'voters'
          | 'wins'
          | 'wlr'
          | 'xp';
        readonly column?:
          | 'bh_wins'
          | 'bw_beds_broken'
          | 'bw_doubles_beds_broken'
          | 'bw_doubles_final_kills'
          | 'bw_doubles_kills'
          | 'bw_doubles_wins'
          | 'bw_final_kills'
          | 'bw_kills'
          | 'bw_solo_beds_broken'
          | 'bw_solo_final_kills'
          | 'bw_solo_kills'
          | 'bw_solo_wins'
          | 'bw_squads_beds_broken'
          | 'bw_squads_final_kills'
          | 'bw_squads_kills'
          | 'bw_squads_wins'
          | 'bw_trios_beds_broken'
          | 'bw_trios_final_kills'
          | 'bw_trios_kills'
          | 'bw_trios_wins'
          | 'bw_wins'
          | 'cq_flags_captured'
          | 'cq_kills'
          | 'cq_wins'
          | 'duels_kills'
          | 'duels_wins'
          | 'kills'
          | 'mm_bow_kills'
          | 'mm_classic_kills'
          | 'mm_classic_wins'
          | 'mm_infection_wins'
          | 'mm_kills'
          | 'mm_knife_kills'
          | 'mm_throw_knife_kills'
          | 'mm_wins'
          | 'ms_wins'
          | 'sc_wins'
          | 'sg_kills'
          | 'sg_wins'
          | 'sw_doubles_insane_kills'
          | 'sw_doubles_kills'
          | 'sw_doubles_normal_kills'
          | 'sw_doubles_wins'
          | 'sw_kills'
          | 'sw_solo_insane_kills'
          | 'sw_solo_kills'
          | 'sw_solo_normal_kills'
          | 'sw_solo_wins'
          | 'sw_wins'
          | 'tb_kills'
          | 'tb_wins'
          | 'wins';
        readonly scope?: 'bestStreak' | 'kills' | 'streak';
      };
    };
    readonly responses: {
      /** Default Response */
      readonly 200: {
        readonly content: {
          readonly 'application/json': components['schemas']['LeaderboardResponse'];
        };
      };
    };
  };
  readonly 'Bulk Get Leaderboards': {
    readonly responses: {
      /** Default Response */
      readonly 200: {
        readonly content: {
          readonly 'application/json': components['schemas']['LeaderboardBulkResponse'];
        };
      };
    };
    readonly requestBody: {
      readonly content: {
        readonly 'application/json': components['schemas']['LeaderboardBulkInput'];
      };
    };
  };
  readonly 'Get Player': {
    readonly parameters: {
      readonly query: {
        readonly expand?: boolean;
        readonly withFactionData?: boolean;
        readonly withGuildData?: boolean;
        readonly withOnline?: boolean;
        readonly withPunishments?: boolean;
        readonly withSkinData?: boolean;
        readonly withStats?: boolean;
        readonly withVoteStatus?: boolean;
      };
    };
    readonly responses: {
      /** Default Response */
      readonly 200: {
        readonly content: {
          readonly 'application/json': components['schemas']['PlayerResponse'];
        };
      };
    };
  };
  readonly 'Get Player Avatar': {
    readonly parameters: {
      readonly query: {
        readonly dataOnly?: boolean;
      };
    };
    readonly responses: {
      /** Default Response */
      readonly 200: {
        readonly content: {
          readonly 'application/json': components['schemas']['PlayerSkinResponseData'];
        };
      };
    };
  };
  readonly 'Get Player Leaderboard': {
    readonly responses: {
      /** Default Response */
      readonly 200: {
        readonly content: {
          readonly 'application/json': components['schemas']['PlayerLeaderboardResponse'];
        };
      };
    };
  };
  readonly 'Bulk Get Player Leaderboards': {
    readonly responses: {
      /** Default Response */
      readonly 200: {
        readonly content: {
          readonly 'application/json': components['schemas']['PlayerLeaderboardBulkResponse'];
        };
      };
    };
    readonly requestBody: {
      readonly content: {
        readonly 'application/json': components['schemas']['PlayerLeaderboardBulkInput'];
      };
    };
  };
  readonly 'Get Player Punishments': {
    readonly responses: {
      /** Default Response */
      readonly 200: {
        readonly content: {
          readonly 'application/json': components['schemas']['PlayerPunishmentsResponse'];
        };
      };
    };
  };
  readonly 'Get Players': {
    readonly parameters: {
      readonly query: {
        readonly withStats?: boolean;
        readonly first?: number;
        readonly after?: string;
        readonly last?: number;
        readonly before?: string;
      };
    };
    readonly responses: {
      /** Default Response */
      readonly 200: {
        readonly content: {
          readonly 'application/json': components['schemas']['RelayPaginationResponse'];
        };
      };
    };
  };
  readonly 'Bulk Get Players': {
    readonly responses: {
      /** Default Response */
      readonly 200: {
        readonly content: {
          readonly 'application/json': components['schemas']['PlayerBulkResponse'];
        };
      };
    };
    readonly requestBody: {
      readonly content: {
        readonly 'application/json': components['schemas']['PlayerBulkInput'];
      };
    };
  };
  readonly 'Get Player Skin': {
    readonly parameters: {
      readonly query: {
        readonly dataOnly?: boolean;
      };
    };
    readonly responses: {
      /** Default Response */
      readonly 200: {
        readonly content: {
          readonly 'application/json': components['schemas']['PlayerSkinResponseData'];
        };
      };
    };
  };
  /** API key required. */
  readonly 'Get Player Stats History': {
    readonly parameters: {
      readonly query: {
        readonly version?: 1;
        readonly periodStart: number;
        readonly periodEnd?: Partial<number> & Partial<-1>;
      };
    };
    readonly responses: {
      /** Default Response */
      readonly 200: {
        readonly content: {
          readonly 'application/json': components['schemas']['PlayerStatsResponse'];
        };
      };
    };
  };
  readonly 'Get Search Results': {
    readonly parameters: {
      readonly query: {
        readonly name: string;
      };
    };
    readonly responses: {
      /** Default Response */
      readonly 200: {
        readonly content: {
          readonly 'application/json': components['schemas']['SearchResponse'];
        };
      };
    };
  };
  readonly 'Get Full-Text Search Results': {
    readonly parameters: {
      readonly query: {
        readonly expand?: boolean;
        readonly withFactionData?: boolean;
        readonly withGuildData?: boolean;
        readonly withOnline?: boolean;
        readonly withPunishments?: boolean;
        readonly withSkinData?: boolean;
        readonly withStats?: boolean;
        readonly withVoteStatus?: boolean;
        readonly limit?: number;
        readonly query: string;
        readonly type?: 'faction' | 'guild' | 'player';
      };
    };
    readonly responses: {
      /** Default Response */
      readonly 200: {
        readonly content: {
          readonly 'application/json': components['schemas']['SearchFullTextResponse'];
        };
      };
    };
  };
  readonly 'Get Server Metadata': {
    readonly responses: {
      /** Default Response */
      readonly 200: {
        readonly content: {
          readonly 'application/json': components['schemas']['ServerMetaResponse'];
        };
      };
    };
  };
  readonly 'Get Server MOTDs': {
    readonly responses: {
      /** Default Response */
      readonly 200: {
        readonly content: {
          readonly 'application/json': components['schemas']['ServerSettingsResponse'];
        };
      };
    };
  };
  readonly 'Get Server Ping': {
    readonly parameters: {
      readonly query: {
        readonly ip?: string;
        readonly port?: number;
      };
    };
    readonly responses: {
      /** Default Response */
      readonly 200: {
        readonly content: {
          readonly 'application/json': components['schemas']['ServerPingResponse'];
        };
      };
    };
  };
  readonly 'Get Servers': {
    readonly responses: {
      /** Default Response */
      readonly 200: {
        readonly content: {
          readonly 'application/json': components['schemas']['ServerResponse'];
        };
      };
    };
  };
  readonly 'Get Service Status': {
    readonly responses: {
      /** Default Response */
      readonly 200: {
        readonly content: {
          readonly 'application/json': components['schemas']['ServiceStatusResponse'];
        };
      };
    };
  };
  readonly 'Get Stream Status': {
    readonly responses: {
      /** Default Response */
      readonly 200: {
        readonly content: {
          readonly 'application/json': components['schemas']['StreamResponse'];
        };
      };
    };
  };
  readonly 'Get Updates': {
    readonly parameters: {
      readonly query: {
        readonly before?: number;
        readonly after?: number;
        readonly limit?: number;
      };
    };
    readonly responses: {
      /** Default Response */
      readonly 200: {
        readonly content: {
          readonly 'application/json': components['schemas']['UpdatesResponse'];
        };
      };
    };
  };
  readonly 'Get XUID Mapping': {
    readonly responses: {
      /** Default Response */
      readonly 200: {
        readonly content: {
          readonly 'application/json': components['schemas']['XuidMappingResponse'];
        };
      };
    };
    readonly requestBody: {
      readonly content: {
        readonly 'application/json': components['schemas']['XuidMappingInput'];
      };
    };
  };
}

export interface external {}
